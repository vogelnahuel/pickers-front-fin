{"ast":null,"code":"/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { bindReporter } from './lib/bindReporter';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nexport var getFID = function (onReport, reportAllChanges) {\n  var visibilityWatcher = getVisibilityWatcher();\n  var metric = initMetric('FID');\n  var report;\n\n  var entryHandler = function (entry) {\n    // Only report if the page wasn't hidden prior to the first input.\n    if (report && entry.startTime < visibilityWatcher.firstHiddenTime) {\n      metric.value = entry.processingStart - entry.startTime;\n      metric.entries.push(entry);\n      report(true);\n    }\n  };\n\n  var po = observe('first-input', entryHandler);\n\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n    onHidden(function () {\n      po.takeRecords().map(entryHandler);\n      po.disconnect();\n    }, true);\n  }\n};","map":{"version":3,"sources":["../../../src/browser/web-vitals/getFID.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,YAAT,QAA6B,oBAA7B;AACA,SAAS,oBAAT,QAAqC,4BAArC;AACA,SAAS,UAAT,QAA2B,kBAA3B;AACA,SAAS,OAAT,QAAiD,eAAjD;AACA,SAAS,QAAT,QAAyB,gBAAzB;AAGA,OAAO,IAAM,MAAM,GAAG,UAAC,QAAD,EAA0B,gBAA1B,EAAoD;AACxE,MAAM,iBAAiB,GAAG,oBAAoB,EAA9C;AACA,MAAM,MAAM,GAAG,UAAU,CAAC,KAAD,CAAzB;AACA,MAAI,MAAJ;;AAEA,MAAM,YAAY,GAAG,UAAC,KAAD,EAA8B;AACjD;AACA,QAAI,MAAM,IAAI,KAAK,CAAC,SAAN,GAAkB,iBAAiB,CAAC,eAAlD,EAAmE;AACjE,MAAA,MAAM,CAAC,KAAP,GAAe,KAAK,CAAC,eAAN,GAAwB,KAAK,CAAC,SAA7C;AACA,MAAA,MAAM,CAAC,OAAP,CAAe,IAAf,CAAoB,KAApB;AACA,MAAA,MAAM,CAAC,IAAD,CAAN;AACD;AACF,GAPD;;AASA,MAAM,EAAE,GAAG,OAAO,CAAC,aAAD,EAAgB,YAAhB,CAAlB;;AACA,MAAI,EAAJ,EAAQ;AACN,IAAA,MAAM,GAAG,YAAY,CAAC,QAAD,EAAW,MAAX,EAAmB,gBAAnB,CAArB;AACA,IAAA,QAAQ,CAAC,YAAA;AACP,MAAA,EAAE,CAAC,WAAH,GAAiB,GAAjB,CAAqB,YAArB;AACA,MAAA,EAAE,CAAC,UAAH;AACD,KAHO,EAGL,IAHK,CAAR;AAID;AACF,CAtBM","sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { PerformanceEventTiming, ReportHandler } from './types';\n\nexport const getFID = (onReport: ReportHandler, reportAllChanges?: boolean): void => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('FID');\n  let report: ReturnType<typeof bindReporter>;\n\n  const entryHandler = (entry: PerformanceEventTiming): void => {\n    // Only report if the page wasn't hidden prior to the first input.\n    if (report && entry.startTime < visibilityWatcher.firstHiddenTime) {\n      metric.value = entry.processingStart - entry.startTime;\n      metric.entries.push(entry);\n      report(true);\n    }\n  };\n\n  const po = observe('first-input', entryHandler as PerformanceEntryHandler);\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n    onHidden(() => {\n      po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n      po.disconnect();\n    }, true);\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}