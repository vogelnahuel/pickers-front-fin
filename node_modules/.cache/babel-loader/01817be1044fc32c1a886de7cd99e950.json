{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { endsWithAny } from \"utils/endsWithAny\";\nexport const initialState = {\n  fetching: false,\n  users: [],\n  filters: {},\n  filtersExtra: {\n    limit: 5,\n    offset: 0\n  },\n  filtersExtraSeeMore: {\n    limit: 15,\n    offset: 0\n  },\n  seeMore: true,\n  sizePage: 15,\n  actualPage: \"PENDING\"\n};\nconst SLICE_NAME = \"pickers\";\n\nconst isRequestAction = action => {\n  const {\n    type\n  } = action;\n  return type.startsWith(SLICE_NAME) && type.endsWith(\"Request\");\n};\n\nconst isResponseAction = action => {\n  const {\n    type\n  } = action;\n  return type.startsWith(SLICE_NAME) && endsWithAny(type, [\"Error\", \"Success\"]);\n}; // Una de las ventajas con la que cuenta redux toolkit es la positibilidad de\n// escribir \"mutating logic\" dentro de los reducers.\n// No realiza la mutación del estado ya que utiliza la libreria Immer, la cual\n// detecta los cambios en un estado \"draft\" y produce un nuevo estado inmutable.\n\n\nexport const pickersSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    reset: state => {\n      state = { ...initialState,\n        actualPage: state.actualPage\n      };\n    },\n    getPendingUserRequest: (state, action) => {},\n    getPendingUserSuccess: (state, action) => {\n      const {\n        payload\n      } = action;\n      state.users = payload.items;\n      state.seeMore = payload.hasMore;\n      state.filtersExtraSeeMore.offset = payload.offset + payload.limit;\n    },\n    getPendingUserError: () => {},\n    setPendingUserFilters: (state, action) => {\n      state.filters = action.payload;\n    },\n    setActualPage: (state, action) => {\n      state.actualPage = action.payload;\n      state.users = [];\n    },\n    setPendingUserExtraFilters: (state, action) => {\n      state.filtersExtra = { ...state.filtersExtra,\n        ...action.payload\n      };\n    },\n    getMorePendingUserRequest: (state, action) => {},\n    getMorePendingUserSuccess: (state, action) => {\n      const {\n        payload\n      } = action;\n      state.users = [...state.users, ...payload.items];\n      state.filtersExtraSeeMore.offset = payload.offset + payload.limit;\n      state.seeMore = payload.hasMore;\n    },\n    getMorePendingUserError: () => {},\n    getPendingUserExportRequest: (state, action) => {},\n    getPendingUserExportSuccess: () => {},\n    getPendingUserExportError: () => {}\n  },\n  extraReducers: builder => builder.addMatcher(isRequestAction, state => {\n    state.fetching = true;\n  }).addMatcher(isResponseAction, state => {\n    state.fetching = false;\n  })\n}); // Se exporta el reducer/slice para asociarlo en la creación del store\n\nexport default pickersSlice.reducer; // Selector del slice \"pickers\"\n\nexport const pickersSelector = state => state.pickers; // Se exportan todas las acciones\n\nexport const actions = pickersSlice.actions;","map":{"version":3,"sources":["/home/nahuel/pickers-admin-front/src/reducers/pickers.ts"],"names":["createSlice","endsWithAny","initialState","fetching","users","filters","filtersExtra","limit","offset","filtersExtraSeeMore","seeMore","sizePage","actualPage","SLICE_NAME","isRequestAction","action","type","startsWith","endsWith","isResponseAction","pickersSlice","name","reducers","reset","state","getPendingUserRequest","getPendingUserSuccess","payload","items","hasMore","getPendingUserError","setPendingUserFilters","setActualPage","setPendingUserExtraFilters","getMorePendingUserRequest","getMorePendingUserSuccess","getMorePendingUserError","getPendingUserExportRequest","getPendingUserExportSuccess","getPendingUserExportError","extraReducers","builder","addMatcher","reducer","pickersSelector","pickers","actions"],"mappings":"AAAA,SAAiBA,WAAjB,QAAmD,kBAAnD;AAOA,SAASC,WAAT,QAA4B,mBAA5B;AAGA,OAAO,MAAMC,YAA6B,GAAG;AAC3CC,EAAAA,QAAQ,EAAE,KADiC;AAE3CC,EAAAA,KAAK,EAAE,EAFoC;AAG3CC,EAAAA,OAAO,EAAE,EAHkC;AAI3CC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,CADK;AAEZC,IAAAA,MAAM,EAAE;AAFI,GAJ6B;AAQ3CC,EAAAA,mBAAmB,EAAE;AACnBF,IAAAA,KAAK,EAAE,EADY;AAEnBC,IAAAA,MAAM,EAAE;AAFW,GARsB;AAY3CE,EAAAA,OAAO,EAAE,IAZkC;AAa3CC,EAAAA,QAAQ,EAAE,EAbiC;AAc3CC,EAAAA,UAAU,EAAE;AAd+B,CAAtC;AAiBP,MAAMC,UAAU,GAAG,SAAnB;;AAEA,MAAMC,eAAe,GAAIC,MAAD,IAA4B;AAClD,QAAM;AAAEC,IAAAA;AAAF,MAAWD,MAAjB;AACA,SAAOC,IAAI,CAACC,UAAL,CAAgBJ,UAAhB,KAA+BG,IAAI,CAACE,QAAL,CAAc,SAAd,CAAtC;AACD,CAHD;;AAKA,MAAMC,gBAAgB,GAAIJ,MAAD,IAA4B;AACnD,QAAM;AAAEC,IAAAA;AAAF,MAAWD,MAAjB;AACA,SAAOC,IAAI,CAACC,UAAL,CAAgBJ,UAAhB,KAA+BZ,WAAW,CAACe,IAAD,EAAO,CAAC,OAAD,EAAU,SAAV,CAAP,CAAjD;AACD,CAHD,C,CAKA;AACA;AACA;AACA;;;AACA,OAAO,MAAMI,YAAY,GAAGpB,WAAW,CAAC;AACtCqB,EAAAA,IAAI,EAAER,UADgC;AAEtCX,EAAAA,YAFsC;AAGtCoB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAGC,KAAD,IAA4B;AACjCA,MAAAA,KAAK,GAAG,EACN,GAAGtB,YADG;AAENU,QAAAA,UAAU,EAAEY,KAAK,CAACZ;AAFZ,OAAR;AAID,KANO;AAORa,IAAAA,qBAAqB,EAAE,CACrBD,KADqB,EAErBT,MAFqB,KAGlB,CAAE,CAVC;AAWRW,IAAAA,qBAAqB,EAAE,CACrBF,KADqB,EAErBT,MAFqB,KAGlB;AACH,YAAM;AAAEY,QAAAA;AAAF,UAAcZ,MAApB;AACAS,MAAAA,KAAK,CAACpB,KAAN,GAAcuB,OAAO,CAACC,KAAtB;AACAJ,MAAAA,KAAK,CAACd,OAAN,GAAgBiB,OAAO,CAACE,OAAxB;AACAL,MAAAA,KAAK,CAACf,mBAAN,CAA0BD,MAA1B,GAAmCmB,OAAO,CAACnB,MAAR,GAAiBmB,OAAO,CAACpB,KAA5D;AACD,KAnBO;AAoBRuB,IAAAA,mBAAmB,EAAE,MAAM,CAAE,CApBrB;AAqBRC,IAAAA,qBAAqB,EAAE,CACrBP,KADqB,EAErBT,MAFqB,KAGlB;AACHS,MAAAA,KAAK,CAACnB,OAAN,GAAgBU,MAAM,CAACY,OAAvB;AACD,KA1BO;AA2BRK,IAAAA,aAAa,EAAE,CAACR,KAAD,EAAyBT,MAAzB,KAA2D;AACxES,MAAAA,KAAK,CAACZ,UAAN,GAAmBG,MAAM,CAACY,OAA1B;AACAH,MAAAA,KAAK,CAACpB,KAAN,GAAc,EAAd;AACD,KA9BO;AA+BR6B,IAAAA,0BAA0B,EAAE,CAC1BT,KAD0B,EAE1BT,MAF0B,KAGvB;AACHS,MAAAA,KAAK,CAAClB,YAAN,GAAqB,EAAE,GAAGkB,KAAK,CAAClB,YAAX;AAAyB,WAAGS,MAAM,CAACY;AAAnC,OAArB;AACD,KApCO;AAqCRO,IAAAA,yBAAyB,EAAE,CACzBV,KADyB,EAEzBT,MAFyB,KAGtB,CAAE,CAxCC;AAyCRoB,IAAAA,yBAAyB,EAAE,CACzBX,KADyB,EAEzBT,MAFyB,KAGtB;AACH,YAAM;AAAEY,QAAAA;AAAF,UAAcZ,MAApB;AACAS,MAAAA,KAAK,CAACpB,KAAN,GAAc,CAAC,GAAGoB,KAAK,CAACpB,KAAV,EAAiB,GAAGuB,OAAO,CAACC,KAA5B,CAAd;AACAJ,MAAAA,KAAK,CAACf,mBAAN,CAA0BD,MAA1B,GAAmCmB,OAAO,CAACnB,MAAR,GAAiBmB,OAAO,CAACpB,KAA5D;AACAiB,MAAAA,KAAK,CAACd,OAAN,GAAgBiB,OAAO,CAACE,OAAxB;AACD,KAjDO;AAkDRO,IAAAA,uBAAuB,EAAE,MAAM,CAAE,CAlDzB;AAmDRC,IAAAA,2BAA2B,EAAE,CAC3Bb,KAD2B,EAE3BT,MAF2B,KAGxB,CAAE,CAtDC;AAuDRuB,IAAAA,2BAA2B,EAAE,MAAM,CAAE,CAvD7B;AAwDRC,IAAAA,yBAAyB,EAAE,MAAM,CAAE;AAxD3B,GAH4B;AA6DtCC,EAAAA,aAAa,EAAGC,OAAD,IACbA,OAAO,CACJC,UADH,CACc5B,eADd,EACgCU,KAAD,IAA4B;AACvDA,IAAAA,KAAK,CAACrB,QAAN,GAAiB,IAAjB;AACD,GAHH,EAIGuC,UAJH,CAIcvB,gBAJd,EAIiCK,KAAD,IAA4B;AACxDA,IAAAA,KAAK,CAACrB,QAAN,GAAiB,KAAjB;AACD,GANH;AA9DoC,CAAD,CAAhC,C,CAyEP;;AACA,eAAeiB,YAAY,CAACuB,OAA5B,C,CAEA;;AACA,OAAO,MAAMC,eAAe,GAAIpB,KAAD,IAAsBA,KAAK,CAACqB,OAApD,C,CAEP;;AACA,OAAO,MAAMC,OAAO,GAAG1B,YAAY,CAAC0B,OAA7B","sourcesContent":["import { Action, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport {\n  ParamsMiddlewareType,\n  PickersParamsType,\n  PickersResponse,\n} from \"pages/pickers/types\";\nimport { RootState } from \"store\";\nimport { endsWithAny } from \"utils/endsWithAny\";\nimport { PickerStateType } from \"./types/pickers\";\n\nexport const initialState: PickerStateType = {\n  fetching: false,\n  users: [],\n  filters: {},\n  filtersExtra: {\n    limit: 5,\n    offset: 0,\n  },\n  filtersExtraSeeMore: {\n    limit: 15,\n    offset: 0,\n  },\n  seeMore: true,\n  sizePage: 15,\n  actualPage: \"PENDING\",\n};\n\nconst SLICE_NAME = \"pickers\";\n\nconst isRequestAction = (action: Action<string>) => {\n  const { type } = action;\n  return type.startsWith(SLICE_NAME) && type.endsWith(\"Request\");\n};\n\nconst isResponseAction = (action: Action<string>) => {\n  const { type } = action;\n  return type.startsWith(SLICE_NAME) && endsWithAny(type, [\"Error\", \"Success\"]);\n};\n\n// Una de las ventajas con la que cuenta redux toolkit es la positibilidad de\n// escribir \"mutating logic\" dentro de los reducers.\n// No realiza la mutación del estado ya que utiliza la libreria Immer, la cual\n// detecta los cambios en un estado \"draft\" y produce un nuevo estado inmutable.\nexport const pickersSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    reset: (state: PickerStateType) => {\n      state = {\n        ...initialState,\n        actualPage: state.actualPage,\n      };\n    },\n    getPendingUserRequest: (\n      state: PickerStateType,\n      action: PayloadAction<ParamsMiddlewareType>\n    ) => {},\n    getPendingUserSuccess: (\n      state: PickerStateType,\n      action: PayloadAction<PickersResponse>\n    ) => {\n      const { payload } = action;\n      state.users = payload.items;\n      state.seeMore = payload.hasMore;\n      state.filtersExtraSeeMore.offset = payload.offset + payload.limit;\n    },\n    getPendingUserError: () => {},\n    setPendingUserFilters: (\n      state: PickerStateType,\n      action: PayloadAction<PickersParamsType>\n    ) => {\n      state.filters = action.payload;\n    },\n    setActualPage: (state: PickerStateType, action: PayloadAction<string>) => {\n      state.actualPage = action.payload;\n      state.users = [];\n    },\n    setPendingUserExtraFilters: (\n      state: PickerStateType,\n      action: PayloadAction<PickersParamsType>\n    ) => {\n      state.filtersExtra = { ...state.filtersExtra, ...action.payload };\n    },\n    getMorePendingUserRequest: (\n      state: PickerStateType,\n      action: PayloadAction<ParamsMiddlewareType>\n    ) => {},\n    getMorePendingUserSuccess: (\n      state: PickerStateType,\n      action: PayloadAction<PickersResponse>\n    ) => {\n      const { payload } = action;\n      state.users = [...state.users, ...payload.items];\n      state.filtersExtraSeeMore.offset = payload.offset + payload.limit;\n      state.seeMore = payload.hasMore;\n    },\n    getMorePendingUserError: () => {},\n    getPendingUserExportRequest: (\n      state: PickerStateType,\n      action: PayloadAction<ParamsMiddlewareType>\n    ) => {},\n    getPendingUserExportSuccess: () => {},\n    getPendingUserExportError: () => {},\n  },\n  extraReducers: (builder) =>\n    builder\n      .addMatcher(isRequestAction, (state: PickerStateType) => {\n        state.fetching = true;\n      })\n      .addMatcher(isResponseAction, (state: PickerStateType) => {\n        state.fetching = false;\n      }),\n\n\n});\n\n// Se exporta el reducer/slice para asociarlo en la creación del store\nexport default pickersSlice.reducer;\n\n// Selector del slice \"pickers\"\nexport const pickersSelector = (state: RootState) => state.pickers;\n\n// Se exportan todas las acciones\nexport const actions = pickersSlice.actions;\n"]},"metadata":{},"sourceType":"module"}