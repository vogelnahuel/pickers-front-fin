{"ast":null,"code":"var _jsxFileName = \"/home/nahuel/pickers-admin-front/src/pages/preliquidation/DetailPreliquidation/editPreliquidationAmount/EditPreliquidationAmountContainer.tsx\",\n    _s = $RefreshSig$();\n\nimport { useMemo, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as yup from \"yup\";\nimport { EditPreliquidationAmount } from \"./EditPreliquidationAmount\";\nimport { actions as preliActions, preliquidationSelector } from \"reducers/preliquidation\";\nimport i18next from \"i18next\";\nimport { LoadingButtonState } from \"component/loadingButton/types\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditPreliquidationAmountContainer = props => {\n  _s();\n\n  const [increase, setIncrease] = useState(true);\n\n  const validateAmount = value => {\n    if (!value) return true;\n    const {\n      preliquidation: {\n        manualCorrection\n      }\n    } = props;\n    if (value < 0) return false;\n    if (value > manualCorrection.maxAllowedPlus && increase) return false;\n    if (value > manualCorrection.maxAllowedSubtract && !increase) return false;\n    return true;\n  };\n\n  const validationSchema = yup.object({\n    actualAmount: yup.string(),\n    newAmount: yup.mixed().test(\"rangeError\", i18next.t(\"detailPreliquidation:error.input.amountExceeded\"), validateAmount).test(\"newAmountRequired\", i18next.t(i18next.t(\"global:error.input.required\")), value => !!value),\n    reason: yup.string().required(i18next.t(\"global:error.input.required\"))\n  });\n  const initialValues = useMemo(() => {\n    return {\n      actualAmount: `$${props.preliquidation.total}`,\n      newAmount: \"\",\n      reason: \"\"\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.preliquidation]);\n\n  const onClose = reload => {\n    props.onCloseModal();\n    setIncrease(true);\n    if (reload && props.preliquidation.id) props.getDetailPreliquidation(props.preliquidation.id);\n  };\n\n  const onSubmit = values => {\n    // Evita multiples llamados\n    if (props.adjustingAmount > LoadingButtonState.Idle) return;\n    const params = {\n      id: props.preliquidation.id,\n      currentAmount: props.preliquidation.total,\n      callback: props.getDetailPreliquidation,\n      adjustment: {\n        amount: Number(values.newAmount),\n        reason: values.reason,\n        type: increase ? \"plus\" : \"subtract\"\n      }\n    };\n    props.adjustAmount(params);\n  };\n\n  if (!props.showModal) return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  return /*#__PURE__*/_jsxDEV(EditPreliquidationAmount, { ...props,\n    onClose: onClose,\n    increase: increase,\n    setIncrease: setIncrease,\n    validationSchema: validationSchema,\n    initialValues: initialValues,\n    onSubmit: onSubmit\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditPreliquidationAmountContainer, \"H/WoQ+dAzaZVkan3TL2KXr4ObUE=\");\n\n_c = EditPreliquidationAmountContainer;\n\nconst mapStateToProps = state => ({\n  showModal: preliquidationSelector(state).showEditPreliquidationModal,\n  adjustingAmount: preliquidationSelector(state).adjustingAmount,\n  preliquidation: preliquidationSelector(state).detailPreliquidations\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onCloseModal: () => {\n    dispatch(preliActions.toggleModalVisibility(false));\n  },\n  getDetailPreliquidation: id => {\n    dispatch(preliActions.getDetailPreliquidationsRequest(id));\n  },\n  adjustAmount: params => {\n    dispatch(preliActions.adjustAmount(params));\n  }\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default _c2 = connector(EditPreliquidationAmountContainer);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EditPreliquidationAmountContainer\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/nahuel/pickers-admin-front/src/pages/preliquidation/DetailPreliquidation/editPreliquidationAmount/EditPreliquidationAmountContainer.tsx"],"names":["useMemo","useState","connect","yup","EditPreliquidationAmount","actions","preliActions","preliquidationSelector","i18next","LoadingButtonState","EditPreliquidationAmountContainer","props","increase","setIncrease","validateAmount","value","preliquidation","manualCorrection","maxAllowedPlus","maxAllowedSubtract","validationSchema","object","actualAmount","string","newAmount","mixed","test","t","reason","required","initialValues","total","onClose","reload","onCloseModal","id","getDetailPreliquidation","onSubmit","values","adjustingAmount","Idle","params","currentAmount","callback","adjustment","amount","Number","type","adjustAmount","showModal","mapStateToProps","state","showEditPreliquidationModal","detailPreliquidations","mapDispatchToProps","dispatch","toggleModalVisibility","getDetailPreliquidationsRequest","connector"],"mappings":"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","sourcesContent":["import { useMemo, useState } from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { AppDispatch, RootState } from \"store\";\nimport * as yup from \"yup\";\nimport { EditPreliquidationAmount } from \"./EditPreliquidationAmount\";\nimport {\n  EditPreliquidationAmountContainerProps,\n  PreliquidationAmountForm,\n} from \"./types\";\nimport {\n  actions as preliActions,\n  preliquidationSelector,\n} from \"reducers/preliquidation\";\nimport i18next from \"i18next\";\nimport { AdjustAmountMiddlewareType } from \"sagas/types/preliquidation\";\nimport { LoadingButtonState } from \"component/loadingButton/types\";\n\nconst EditPreliquidationAmountContainer = (\n  props: EditPreliquidationAmountContainerProps & ConnectorProps\n): JSX.Element => {\n  const [increase, setIncrease] = useState(true);\n\n  const validateAmount = (value: number | undefined) => {\n    if (!value) return true;\n\n    const {\n      preliquidation: { manualCorrection },\n    } = props;\n\n    if (value < 0) return false;\n    if (value > manualCorrection.maxAllowedPlus && increase) return false;\n    if (value > manualCorrection.maxAllowedSubtract && !increase) return false;\n\n    return true;\n  };\n\n  const validationSchema: yup.SchemaOf<PreliquidationAmountForm> = yup.object({\n    actualAmount: yup.string(),\n    newAmount: yup\n      .mixed()\n      .test(\n        \"rangeError\",\n        i18next.t(\"detailPreliquidation:error.input.amountExceeded\"),\n        validateAmount\n      )\n      .test(\n        \"newAmountRequired\",\n        i18next.t(i18next.t(\"global:error.input.required\")),\n        (value: number | undefined) => !!value\n      ),\n    reason: yup.string().required(i18next.t(\"global:error.input.required\")),\n  });\n\n  const initialValues: PreliquidationAmountForm = useMemo(() => {\n    return {\n      actualAmount: `$${props.preliquidation.total}`,\n      newAmount: \"\",\n      reason: \"\",\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.preliquidation]);\n\n  const onClose = (reload?: boolean) => {\n    props.onCloseModal();\n    setIncrease(true);\n    if (reload && props.preliquidation.id)\n      props.getDetailPreliquidation(props.preliquidation.id);\n  };\n\n  const onSubmit = (values: PreliquidationAmountForm) => {\n    // Evita multiples llamados\n    if(props.adjustingAmount > LoadingButtonState.Idle) return;\n\n    const params: AdjustAmountMiddlewareType = {\n      id: props.preliquidation.id,\n      currentAmount: props.preliquidation.total,\n      callback: props.getDetailPreliquidation,\n      adjustment: {\n        amount: Number(values.newAmount),\n        reason: values.reason,\n        type: increase ? \"plus\" : \"subtract\",\n      },\n    };\n    props.adjustAmount(params);\n  };\n  \n  if (!props.showModal) return <></>;\n\n  return (\n    <EditPreliquidationAmount\n      {...props}\n      onClose={onClose}\n      increase={increase}\n      setIncrease={setIncrease}\n      validationSchema={validationSchema}\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n    />\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  showModal: preliquidationSelector(state).showEditPreliquidationModal,\n  adjustingAmount: preliquidationSelector(state).adjustingAmount,\n  preliquidation: preliquidationSelector(state).detailPreliquidations,\n});\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\n  onCloseModal: () => {\n    dispatch(preliActions.toggleModalVisibility(false));\n  },\n  getDetailPreliquidation: (id: number) => {\n    dispatch(preliActions.getDetailPreliquidationsRequest(id));\n  },\n  adjustAmount: (params: AdjustAmountMiddlewareType) => {\n    dispatch(preliActions.adjustAmount(params));\n  },\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype ConnectorProps = ConnectedProps<typeof connector>;\n\nexport default connector(EditPreliquidationAmountContainer);\n"]},"metadata":{},"sourceType":"module"}