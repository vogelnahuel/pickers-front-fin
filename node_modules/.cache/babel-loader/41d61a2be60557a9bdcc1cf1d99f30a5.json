{"ast":null,"code":"var _jsxFileName = \"/home/nahuel/pickers-admin-front/src/pages/preliquidation/PreliquidationContainer.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Preliquidation } from \"./Preliquidation\";\nimport { actions as preliActions, preliquidationSelector } from \"../../reducers/preliquidation\";\nimport { actions as notificationActions } from \"../../reducers/notification\";\nimport i18next from \"i18next\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PreliquidationContainer = props => {\n  _s();\n\n  useEffect(() => {\n    const filtersExtra = {\n      limit: window.innerHeight < 770 ? 3 : 4,\n      offset: 0\n    };\n    props.resetAllSelected();\n    props.setPreliquidationFilters({});\n    props.setPreliquidationExtraFilters(filtersExtra);\n    props.getPreliquidations({ ...filtersExtra\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const sendToAccounting = () => {\n    const namespace = \"preli:label.modal\";\n    const {\n      numberOfPreliSelected: n\n    } = props;\n    const word = i18next.t(`${namespace}.preliquidation${n > 1 ? \"s\" : \"\"}`);\n    props.showNotification({\n      level: \"warning\",\n      title: i18next.t(\"preli:title.modal.sendToAccounting\"),\n      body: i18next.t(`${namespace}.sendToAccounting`, {\n        quantity: `<span class=\"preliquidation-quantity\">${n} ${word}</span>`\n      }),\n      onCloseLabel: i18next.t(\"global:label.button.cancel\"),\n      onClickLabel: i18next.t(\"preli:label.button.send\"),\n      onClose: undefined,\n      onClick: () => props.sendAccounting({\n        presettlements: props.preliquidationsSelected.map(item => {\n          return item.id;\n        })\n      })\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Preliquidation, { ...props,\n    sendToAccounting: sendToAccounting\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 10\n  }, this);\n};\n\n_s(PreliquidationContainer, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = PreliquidationContainer;\n\nconst mapStateToProps = state => ({\n  preliquidations: preliquidationSelector(state).preliquidations,\n  isFetching: preliquidationSelector(state).fetching,\n  filters: preliquidationSelector(state).filters,\n  filtersExtra: preliquidationSelector(state).filtersExtra,\n  filtersExtraSeeMore: preliquidationSelector(state).filtersExtraSeeMore,\n  seeMore: preliquidationSelector(state).seeMore,\n  preliquidationsSelected: preliquidationSelector(state).preliquidationsSelected,\n  numberOfPreliSelected: preliquidationSelector(state).preliquidationsSelected.length,\n  anyPreliquidationSelected: preliquidationSelector(state).preliquidationsSelected.length > 0\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getPreliquidations: params => {\n    dispatch(preliActions.getPreliquidationsRequest(params));\n  },\n  setPreliquidationFilters: params => {\n    dispatch(preliActions.setPreliquidationFilters(params));\n  },\n  setPreliquidationExtraFilters: params => {\n    dispatch(preliActions.setPreliquidationExtraFilters(params));\n  },\n  getMorePreliquidations: params => {\n    dispatch(preliActions.getMorePreliquidationsRequest(params));\n  },\n  resetAllSelected: () => {\n    dispatch(preliActions.resetAllSelected());\n  },\n  showNotification: content => {\n    dispatch(notificationActions.showNotification(content));\n  },\n  sendAccounting: params => {\n    dispatch(preliActions.sendAccountingRequest(params));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PreliquidationContainer);\n\nvar _c;\n\n$RefreshReg$(_c, \"PreliquidationContainer\");","map":{"version":3,"sources":["/home/nahuel/pickers-admin-front/src/pages/preliquidation/PreliquidationContainer.tsx"],"names":["React","useEffect","connect","Preliquidation","actions","preliActions","preliquidationSelector","notificationActions","i18next","PreliquidationContainer","props","filtersExtra","limit","window","innerHeight","offset","resetAllSelected","setPreliquidationFilters","setPreliquidationExtraFilters","getPreliquidations","sendToAccounting","namespace","numberOfPreliSelected","n","word","t","showNotification","level","title","body","quantity","onCloseLabel","onClickLabel","onClose","undefined","onClick","sendAccounting","presettlements","preliquidationsSelected","map","item","id","mapStateToProps","state","preliquidations","isFetching","fetching","filters","filtersExtraSeeMore","seeMore","length","anyPreliquidationSelected","mapDispatchToProps","dispatch","params","getPreliquidationsRequest","getMorePreliquidations","getMorePreliquidationsRequest","content","sendAccountingRequest"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { PreliquidationParamsMiddlewareType, sendAccountinMiddlewareType } from \"sagas/types/preliquidation\";\nimport { AppDispatch, RootState } from \"store\";\nimport { Preliquidation } from \"./Preliquidation\";\nimport {\n  actions as preliActions,\n  preliquidationSelector,\n} from \"../../reducers/preliquidation\";\nimport { actions as notificationActions } from \"../../reducers/notification\";\nimport { PreliquidationContainerProps } from \"./types\";\nimport { NotificationStateType } from \"reducers/types/notification\";\nimport i18next from \"i18next\";\nimport { PreliquidationFilterExtraType, PreliquidationFiltersType } from \"./filter/types\";\n\nconst PreliquidationContainer = (\n  props: PreliquidationContainerProps\n): JSX.Element => {\n  useEffect(() => {\n    const filtersExtra = { limit: window.innerHeight < 770 ? 3 : 4, offset: 0 };\n    props.resetAllSelected();\n    props.setPreliquidationFilters({});\n    props.setPreliquidationExtraFilters(filtersExtra);\n    props.getPreliquidations({ ...filtersExtra });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const sendToAccounting = () => {\n    const namespace = \"preli:label.modal\";\n    const { numberOfPreliSelected: n } = props;\n    const word = i18next.t(`${namespace}.preliquidation${n > 1 ? \"s\" : \"\"}`);\n    props.showNotification({\n      level: \"warning\",\n      title: i18next.t(\"preli:title.modal.sendToAccounting\"),\n      body: i18next.t(`${namespace}.sendToAccounting`, {\n        quantity: `<span class=\"preliquidation-quantity\">${n} ${word}</span>`,\n      }),\n      onCloseLabel: i18next.t(\"global:label.button.cancel\"),\n      onClickLabel: i18next.t(\"preli:label.button.send\"),\n      onClose: undefined,\n      onClick: () => props.sendAccounting({ presettlements: props.preliquidationsSelected.map((item)=>{return item.id}) }),\n    });\n  };\n\n  return <Preliquidation {...props} sendToAccounting={sendToAccounting} />;\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  preliquidations: preliquidationSelector(state).preliquidations,\n  isFetching: preliquidationSelector(state).fetching,\n  filters: preliquidationSelector(state).filters,\n  filtersExtra: preliquidationSelector(state).filtersExtra,\n  filtersExtraSeeMore: preliquidationSelector(state).filtersExtraSeeMore,\n  seeMore: preliquidationSelector(state).seeMore,\n  preliquidationsSelected: preliquidationSelector(state).preliquidationsSelected,\n  numberOfPreliSelected:\n    preliquidationSelector(state).preliquidationsSelected.length,\n  anyPreliquidationSelected:\n    preliquidationSelector(state).preliquidationsSelected.length > 0,\n});\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\n  getPreliquidations: (params: PreliquidationParamsMiddlewareType) => {\n    dispatch(preliActions.getPreliquidationsRequest(params));\n  },\n  setPreliquidationFilters: (params: PreliquidationFiltersType) => {\n    dispatch(preliActions.setPreliquidationFilters(params))\n  },\n  setPreliquidationExtraFilters: (params: PreliquidationFilterExtraType) => {\n    dispatch(preliActions.setPreliquidationExtraFilters(params));\n  },\n  getMorePreliquidations: (params: PreliquidationParamsMiddlewareType) => {\n    dispatch(preliActions.getMorePreliquidationsRequest(params));\n  },\n  resetAllSelected: () => {\n    dispatch(preliActions.resetAllSelected())\n  },\n  showNotification: (content: NotificationStateType) => {\n    dispatch(notificationActions.showNotification(content));\n  },\n  sendAccounting: (params: sendAccountinMiddlewareType) => {\n    dispatch(preliActions.sendAccountingRequest(params));\n  },\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PreliquidationContainer);\n"]},"metadata":{},"sourceType":"module"}