{"ast":null,"code":"import i18next from \"i18next\";\nimport * as transactionsMiddleware from \"middleware/transactions\";\nimport { actions as notificationActions } from \"reducers/notification\";\nimport { actions } from \"reducers/transactions\";\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport createCSV from \"utils/createCSV\";\nconst sagas = [takeLatest(actions.getTransactionsRequest.type, getTransactions), takeLatest(actions.getTransactionsExportRequest.type, getTransactionsExport), takeLatest(actions.getMoreTransactionsRequest.type, getMoreTransactions)];\nexport default sagas;\n\nfunction* getTransactions(_ref) {\n  let {\n    payload\n  } = _ref;\n  delete payload[\"date\"];\n  const response = yield call(transactionsMiddleware.getTransactions, payload);\n\n  if (response.status !== 200) {\n    switch (response.data.statusCode) {\n      case 20011:\n        yield put(notificationActions.showNotification({\n          level: \"error\",\n          title: i18next.t(\"transactions:title.modal.rangeExceeded\"),\n          body: i18next.t(\"transactions:label.modal.rangeExceeded\")\n        }));\n        break;\n\n      case 20013:\n        yield put(actions.setExportEnabled());\n        yield put(actions.getTransactionsSuccess({\n          items: [],\n          limit: 0,\n          offset: 0,\n          hasMore: false\n        }));\n        break;\n\n      default:\n        break;\n    }\n\n    yield put(actions.setExportEnabled());\n    yield put(actions.getTransactionsError());\n  } else {\n    const {\n      result: {\n        items\n      },\n      limit,\n      offset,\n      hasMore\n    } = response.data;\n    yield put(actions.setExportEnabled(payload.pickerId || payload.transactionCode || payload.minMinDeliveryDate));\n    yield put(actions.getTransactionsSuccess({\n      items,\n      limit,\n      offset,\n      hasMore\n    }));\n  }\n}\n\nfunction* getMoreTransactions(_ref2) {\n  let {\n    payload\n  } = _ref2;\n  delete payload[\"date\"];\n  const response = yield call(transactionsMiddleware.getTransactions, payload);\n\n  if (response.status !== 200) {\n    yield put(actions.getTransactionsError());\n  } else {\n    const {\n      result: {\n        items\n      },\n      limit,\n      offset,\n      hasMore\n    } = response.data;\n    yield put(actions.getMoreTransactionsSuccess({\n      items,\n      limit,\n      offset,\n      hasMore\n    }));\n  }\n}\n\nfunction* getTransactionsExport(_ref3) {\n  let {\n    payload\n  } = _ref3;\n  const response = yield call(transactionsMiddleware.getTransactionsExport, payload);\n\n  if (response.status !== 200) {\n    yield put(actions.getTransactionsExportError());\n  } else {\n    createCSV(response.data, \"transactions\");\n    yield put(notificationActions.showNotification({\n      level: \"success\",\n      title: i18next.t(\"global:title.modal.export\"),\n      body: i18next.t(\"global:label.modal.export\")\n    }));\n    yield put(actions.getTransactionsExportSuccess());\n  }\n}","map":{"version":3,"sources":["/home/nahuel/pickers-admin-front/src/sagas/transactions.ts"],"names":["i18next","transactionsMiddleware","actions","notificationActions","call","put","takeLatest","createCSV","sagas","getTransactionsRequest","type","getTransactions","getTransactionsExportRequest","getTransactionsExport","getMoreTransactionsRequest","getMoreTransactions","payload","response","status","data","statusCode","showNotification","level","title","t","body","setExportEnabled","getTransactionsSuccess","items","limit","offset","hasMore","getTransactionsError","result","pickerId","transactionCode","minMinDeliveryDate","getMoreTransactionsSuccess","getTransactionsExportError","getTransactionsExportSuccess"],"mappings":"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","sourcesContent":["import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { AxiosResponse } from \"axios\";\nimport i18next from \"i18next\";\nimport * as transactionsMiddleware from \"middleware/transactions\";\nimport { actions as notificationActions } from \"reducers/notification\";\nimport { actions } from \"reducers/transactions\";\nimport { NotificationStateType } from \"reducers/types/notification\";\nimport { GetTransactionsSuccessType } from \"reducers/types/transaction\";\nimport {\n  call,\n  CallEffect,\n  ForkEffect,\n  put,\n  PutEffect,\n  takeLatest,\n} from \"redux-saga/effects\";\nimport createCSV from \"utils/createCSV\";\nimport {\n  FilterTransactionsType,\n  TransactionResponseContent,\n  TransactionsExportContentType,\n} from \"./types/transactions\";\n\nconst sagas: ForkEffect<never>[] = [\n  takeLatest(actions.getTransactionsRequest.type, getTransactions),\n  takeLatest(actions.getTransactionsExportRequest.type, getTransactionsExport),\n  takeLatest(actions.getMoreTransactionsRequest.type, getMoreTransactions),\n];\n\nexport default sagas;\n\nfunction* getTransactions({\n  payload,\n}: PayloadAction<FilterTransactionsType>): Generator<\n  | CallEffect<AxiosResponse<TransactionResponseContent>>\n  | PutEffect<{ type: string; content: NotificationStateType }>\n  | PutEffect<{ type: string; transactions: GetTransactionsSuccessType }>\n  | PutEffect<{ type: string }>,\n  void,\n  TransactionResponseContent\n> {\n  delete payload[\"date\"];\n  const response = yield call(transactionsMiddleware.getTransactions, payload);\n  if (response.status !== 200) {\n    switch (response.data.statusCode) {\n      case 20011:\n        yield put(\n          notificationActions.showNotification({\n            level: \"error\",\n            title: i18next.t(\"transactions:title.modal.rangeExceeded\"),\n            body: i18next.t(\"transactions:label.modal.rangeExceeded\"),\n          })\n          );\n          break;\n      case 20013:\n        yield put(actions.setExportEnabled());\n        yield put(\n          actions.getTransactionsSuccess({\n            items: [],\n            limit: 0,\n            offset: 0,\n            hasMore: false,\n          })\n        );\n        break;\n\n      default:\n        break;\n    }\n    yield put(actions.setExportEnabled());\n    yield put(actions.getTransactionsError());\n  } else {\n    const {\n      result: { items },\n      limit,\n      offset,\n      hasMore,\n    } = response.data;\n    yield put(\n      actions.setExportEnabled(\n        payload.pickerId ||\n          payload.transactionCode ||\n          payload.minMinDeliveryDate\n      )\n    );\n    yield put(\n      actions.getTransactionsSuccess({\n        items,\n        limit,\n        offset,\n        hasMore,\n      })\n    );\n  }\n}\n\nfunction* getMoreTransactions({\n  payload,\n}: PayloadAction<FilterTransactionsType>): Generator<\n  | CallEffect<AxiosResponse<TransactionResponseContent>>\n  | PutEffect<{ type: string }>,\n  void,\n  TransactionResponseContent\n> {\n  delete payload[\"date\"];\n  const response = yield call(transactionsMiddleware.getTransactions, payload);\n\n  if (response.status !== 200) {\n    yield put(actions.getTransactionsError());\n  } else {\n    const {\n      result: { items },\n      limit,\n      offset,\n      hasMore,\n    } = response.data;\n    yield put(\n      actions.getMoreTransactionsSuccess({\n        items,\n        limit,\n        offset,\n        hasMore,\n      })\n    );\n  }\n}\n\nfunction* getTransactionsExport({\n  payload,\n}: PayloadAction<FilterTransactionsType>): Generator<\n  | CallEffect<AxiosResponse<TransactionsExportContentType>>\n  | PutEffect<{ type: string; payload: NotificationStateType }>\n  | PutEffect<{ type: string; payload: undefined }>,\n  void,\n  TransactionsExportContentType\n> {\n  const response = yield call(\n    transactionsMiddleware.getTransactionsExport,\n    payload\n  );\n  if (response.status !== 200) {\n    yield put(actions.getTransactionsExportError());\n  } else {\n    createCSV(response.data, \"transactions\");\n    yield put(\n      notificationActions.showNotification({\n        level: \"success\",\n        title: i18next.t(\"global:title.modal.export\"),\n        body: i18next.t(\"global:label.modal.export\"),\n      })\n    );\n    yield put(actions.getTransactionsExportSuccess());\n  }\n}\n"]},"metadata":{},"sourceType":"module"}