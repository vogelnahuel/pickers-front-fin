{"ast":null,"code":"var _jsxFileName = \"/home/nahuel/pickers-admin-front/src/pages/transaction/filterTransaction/FilterTransactionContainer.tsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { actions as transactionActions, transactionsSelector } from \"reducers/transactions\";\nimport { FilterTransaction } from \"pages/transaction/filterTransaction/FilterTransaction\";\nimport moment from \"moment\";\nimport * as yup from \"yup\";\nimport { DATE_FORMATS } from \"utils/constants\";\nimport { VALIDATION_REGEX } from \"utils/constants\";\nimport i18next from \"i18next\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FilterTransactionContainer = props => {\n  const formatDate = date => {\n    let result = {};\n\n    if (date) {\n      result.date = date;\n\n      if (moment(date.from, DATE_FORMATS.shortDate).isValid()) {\n        result.minMinDeliveryDate = moment(date.from, DATE_FORMATS.shortDate).format(DATE_FORMATS.shortISODate);\n        result.maxMinDeliveryDate = moment(date.until, DATE_FORMATS.shortDate).format(DATE_FORMATS.shortISODate);\n      }\n    }\n\n    return result;\n  };\n\n  const takeFilters = values => {\n    let formatedDate = formatDate(values.date);\n    return { ...formatedDate,\n      state: values.state === \"\" ? undefined : values.state,\n      pickerId: values.pickerId,\n      inAlert: values.inAlert,\n      transactionCode: values.transactionCode\n    };\n  };\n\n  const onSubmit = values => {\n    let filtersApplied = takeFilters(values);\n    props.getTransactions({ ...filtersApplied,\n      ...props.filtersExtra\n    });\n    props.setFilters(filtersApplied);\n  };\n\n  const validationSchema = yup.object({\n    transactionCode: yup.string().matches(VALIDATION_REGEX.regTransactionCode, i18next.t(\"filterTransaction:error.input.codeTransaction\")),\n    pickerId: yup.string().matches(VALIDATION_REGEX.regPickerId, i18next.t(\"global:error.input.lettersOrSpecialCharacters\"))\n  });\n  return /*#__PURE__*/_jsxDEV(FilterTransaction, { ...props,\n    onSubmit: onSubmit,\n    validationSchema: validationSchema\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n\n_c = FilterTransactionContainer;\n\nconst mapStateToProps = state => ({\n  filters: transactionsSelector(state).filters,\n  filtersExtra: transactionsSelector(state).filtersExtra\n});\n\nconst mapDispatchToProps = dispatch => ({\n  reset: () => {\n    dispatch(transactionActions.reset());\n  },\n  getTransactions: params => {\n    dispatch(transactionActions.getTransactionsRequest(params));\n  },\n  setFilters: filters => {\n    dispatch(transactionActions.setTransactionFilters(filters));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterTransactionContainer);\n\nvar _c;\n\n$RefreshReg$(_c, \"FilterTransactionContainer\");","map":{"version":3,"sources":["/home/nahuel/pickers-admin-front/src/pages/transaction/filterTransaction/FilterTransactionContainer.tsx"],"names":["React","connect","actions","transactionActions","transactionsSelector","FilterTransaction","moment","yup","DATE_FORMATS","VALIDATION_REGEX","i18next","FilterTransactionContainer","props","formatDate","date","result","from","shortDate","isValid","minMinDeliveryDate","format","shortISODate","maxMinDeliveryDate","until","takeFilters","values","formatedDate","state","undefined","pickerId","inAlert","transactionCode","onSubmit","filtersApplied","getTransactions","filtersExtra","setFilters","validationSchema","object","string","matches","regTransactionCode","t","regPickerId","mapStateToProps","filters","mapDispatchToProps","dispatch","reset","params","getTransactionsRequest","setTransactionFilters"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  actions as transactionActions,\n  transactionsSelector,\n} from \"reducers/transactions\";\nimport { FilterTransaction } from \"pages/transaction/filterTransaction/FilterTransaction\";\nimport moment from \"moment\";\nimport * as yup from \"yup\";\nimport { DATE_FORMATS } from \"utils/constants\";\nimport { VALIDATION_REGEX } from \"utils/constants\";\nimport { AppDispatch, RootState } from \"store\";\nimport {\n  FilterTransactionsType,\n  FilterTransactionsValidationSchemaType,\n} from \"sagas/types/transactions\";\nimport {\n  DateType,\n  FilterContainerPropsType,\n  FilterDateType,\n  FilterValuesType,\n} from \"./types\";\nimport { SetFilterType } from \"reducers/types/transaction\";\nimport i18next from \"i18next\";\n\nconst FilterTransactionContainer: React.FC<FilterContainerPropsType> = (\n  props\n): JSX.Element => {\n  const formatDate = (date: DateType): FilterDateType => {\n    let result: FilterDateType = {};\n    if (date) {\n      result.date = date;\n      if (moment(date.from, DATE_FORMATS.shortDate).isValid()) {\n        result.minMinDeliveryDate = moment(\n          date.from,\n          DATE_FORMATS.shortDate\n        ).format(DATE_FORMATS.shortISODate);\n        result.maxMinDeliveryDate = moment(\n          date.until,\n          DATE_FORMATS.shortDate\n        ).format(DATE_FORMATS.shortISODate);\n      }\n    }\n    return result;\n  };\n\n  const takeFilters = (values: FilterValuesType) => {\n    let formatedDate = formatDate(values.date);\n    return {\n      ...formatedDate,\n      state: values.state === \"\" ? undefined : values.state,\n      pickerId: values.pickerId,\n      inAlert: values.inAlert,\n      transactionCode: values.transactionCode,\n    };\n  };\n\n  const onSubmit = (values: FilterValuesType) => {\n    let filtersApplied = takeFilters(values);\n    props.getTransactions({ ...filtersApplied, ...props.filtersExtra });\n    props.setFilters(filtersApplied);\n  };\n\n  const validationSchema: yup.SchemaOf<FilterTransactionsValidationSchemaType> =\n    yup.object({\n      transactionCode: yup\n        .string()\n        .matches(\n          VALIDATION_REGEX.regTransactionCode,\n          i18next.t(\"filterTransaction:error.input.codeTransaction\")\n        ),\n      pickerId: yup\n        .string()\n        .matches(\n          VALIDATION_REGEX.regPickerId,\n          i18next.t(\"global:error.input.lettersOrSpecialCharacters\")\n        ),\n    });\n\n  return (\n    <FilterTransaction\n      {...props}\n      onSubmit={onSubmit}\n      validationSchema={validationSchema}\n    />\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  filters: transactionsSelector(state).filters,\n  filtersExtra: transactionsSelector(state).filtersExtra,\n});\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\n  reset: () => {\n    dispatch(transactionActions.reset());\n  },\n  getTransactions: (params: FilterTransactionsType) => {\n    dispatch(transactionActions.getTransactionsRequest(params));\n  },\n  setFilters: (filters: SetFilterType) => {\n    dispatch(transactionActions.setTransactionFilters(filters));\n  },\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FilterTransactionContainer);\n"]},"metadata":{},"sourceType":"module"}