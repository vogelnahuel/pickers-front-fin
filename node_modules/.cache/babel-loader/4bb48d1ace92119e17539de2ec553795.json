{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { getGlobalObject } from './global';\nimport { snipLine } from './string';\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\n\nexport function uuid4() {\n  var global = getGlobalObject();\n  var crypto = global.crypto || global.msCrypto;\n\n  if (!(crypto === void 0) && crypto.getRandomValues) {\n    // Use window.crypto API if available\n    var arr = new Uint16Array(8);\n    crypto.getRandomValues(arr); // set 4 in byte 7\n    // eslint-disable-next-line no-bitwise\n\n    arr[3] = arr[3] & 0xfff | 0x4000; // set 2 most significant bits of byte 9 to '10'\n    // eslint-disable-next-line no-bitwise\n\n    arr[4] = arr[4] & 0x3fff | 0x8000;\n\n    var pad = function (num) {\n      var v = num.toString(16);\n\n      while (v.length < 4) {\n        v = \"0\" + v;\n      }\n\n      return v;\n    };\n\n    return pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7]);\n  } // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n\n\n  return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    // eslint-disable-next-line no-bitwise\n    var r = Math.random() * 16 | 0; // eslint-disable-next-line no-bitwise\n\n    var v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\n\nexport function parseUrl(url) {\n  if (!url) {\n    return {};\n  }\n\n  var match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  } // coerce to undefined values to empty string so we don't get 'undefined'\n\n\n  var query = match[6] || '';\n  var fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    relative: match[5] + query + fragment\n  };\n}\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\n\nexport function getEventDescription(event) {\n  if (event.message) {\n    return event.message;\n  }\n\n  if (event.exception && event.exception.values && event.exception.values[0]) {\n    var exception = event.exception.values[0];\n\n    if (exception.type && exception.value) {\n      return exception.type + \": \" + exception.value;\n    }\n\n    return exception.type || exception.value || event.event_id || '<unknown>';\n  }\n\n  return event.event_id || '<unknown>';\n}\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\n\nexport function addExceptionTypeValue(event, value, type) {\n  event.exception = event.exception || {};\n  event.exception.values = event.exception.values || [];\n  event.exception.values[0] = event.exception.values[0] || {};\n  event.exception.values[0].value = event.exception.values[0].value || value || '';\n  event.exception.values[0].type = event.exception.values[0].type || type || 'Error';\n}\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */\n\nexport function addExceptionMechanism(event, newMechanism) {\n  var _a;\n\n  if (!event.exception || !event.exception.values) {\n    return;\n  }\n\n  var exceptionValue0 = event.exception.values[0];\n  var defaultMechanism = {\n    type: 'generic',\n    handled: true\n  };\n  var currentMechanism = exceptionValue0.mechanism;\n  exceptionValue0.mechanism = __assign(__assign(__assign({}, defaultMechanism), currentMechanism), newMechanism);\n\n  if (newMechanism && 'data' in newMechanism) {\n    var mergedData = __assign(__assign({}, (_a = currentMechanism) === null || _a === void 0 ? void 0 : _a.data), newMechanism.data);\n\n    exceptionValue0.mechanism.data = mergedData;\n  }\n} // https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\n\nvar SEMVER_REGEXP = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\n\nexport function parseSemver(input) {\n  var match = input.match(SEMVER_REGEXP) || [];\n  var major = parseInt(match[1], 10);\n  var minor = parseInt(match[2], 10);\n  var patch = parseInt(match[3], 10);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4]\n  };\n}\nvar defaultRetryAfter = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param now current unix timestamp\n * @param header string representation of 'Retry-After' header\n */\n\nexport function parseRetryAfterHeader(now, header) {\n  if (!header) {\n    return defaultRetryAfter;\n  }\n\n  var headerDelay = parseInt(\"\" + header, 10);\n\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  var headerDate = Date.parse(\"\" + header);\n\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return defaultRetryAfter;\n}\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\n\nexport function addContextToFrame(lines, frame, linesOfContext) {\n  if (linesOfContext === void 0) {\n    linesOfContext = 5;\n  }\n\n  var lineno = frame.lineno || 0;\n  var maxLines = lines.length;\n  var sourceLine = Math.max(Math.min(maxLines, lineno - 1), 0);\n  frame.pre_context = lines.slice(Math.max(0, sourceLine - linesOfContext), sourceLine).map(function (line) {\n    return snipLine(line, 0);\n  });\n  frame.context_line = snipLine(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n  frame.post_context = lines.slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext).map(function (line) {\n    return snipLine(line, 0);\n  });\n}\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\n\nexport function stripUrlQueryAndFragment(urlPath) {\n  // eslint-disable-next-line no-useless-escape\n  return urlPath.split(/[\\?#]/, 1)[0];\n}\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */\n\nexport function checkOrSetAlreadyCaught(exception) {\n  var _a; // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n\n  if ((_a = exception) === null || _a === void 0 ? void 0 : _a.__sentry_captured__) {\n    return true;\n  }\n\n  try {\n    // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n    // `ExtraErrorData` integration\n    Object.defineProperty(exception, '__sentry_captured__', {\n      value: true\n    });\n  } catch (err) {// `exception` is a primitive, so we can't mark it seen\n  }\n\n  return false;\n}","map":{"version":3,"sources":["../src/misc.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Event, Mechanism, StackFrame } from '@sentry/types';\n\nimport { getGlobalObject } from './global';\nimport { snipLine } from './string';\n\n/**\n * Extended Window interface that allows for Crypto API usage in IE browsers\n */\ninterface MsCryptoWindow extends Window {\n  msCrypto?: Crypto;\n}\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\nexport function uuid4(): string {\n  const global = getGlobalObject() as MsCryptoWindow;\n  const crypto = global.crypto || global.msCrypto;\n\n  if (!(crypto === void 0) && crypto.getRandomValues) {\n    // Use window.crypto API if available\n    const arr = new Uint16Array(8);\n    crypto.getRandomValues(arr);\n\n    // set 4 in byte 7\n    // eslint-disable-next-line no-bitwise\n    arr[3] = (arr[3] & 0xfff) | 0x4000;\n    // set 2 most significant bits of byte 9 to '10'\n    // eslint-disable-next-line no-bitwise\n    arr[4] = (arr[4] & 0x3fff) | 0x8000;\n\n    const pad = (num: number): string => {\n      let v = num.toString(16);\n      while (v.length < 4) {\n        v = `0${v}`;\n      }\n      return v;\n    };\n\n    return (\n      pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7])\n    );\n  }\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    // eslint-disable-next-line no-bitwise\n    const r = (Math.random() * 16) | 0;\n    // eslint-disable-next-line no-bitwise\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(\n  url: string,\n): {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n} {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nexport function getEventDescription(event: Event): string {\n  if (event.message) {\n    return event.message;\n  }\n  if (event.exception && event.exception.values && event.exception.values[0]) {\n    const exception = event.exception.values[0];\n\n    if (exception.type && exception.value) {\n      return `${exception.type}: ${exception.value}`;\n    }\n    return exception.type || exception.value || event.event_id || '<unknown>';\n  }\n  return event.event_id || '<unknown>';\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nexport function addExceptionTypeValue(event: Event, value?: string, type?: string): void {\n  event.exception = event.exception || {};\n  event.exception.values = event.exception.values || [];\n  event.exception.values[0] = event.exception.values[0] || {};\n  event.exception.values[0].value = event.exception.values[0].value || value || '';\n  event.exception.values[0].type = event.exception.values[0].type || type || 'Error';\n}\n\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */\nexport function addExceptionMechanism(event: Event, newMechanism?: Partial<Mechanism>): void {\n  if (!event.exception || !event.exception.values) {\n    return;\n  }\n  const exceptionValue0 = event.exception.values[0];\n\n  const defaultMechanism = { type: 'generic', handled: true };\n  const currentMechanism = exceptionValue0.mechanism;\n  exceptionValue0.mechanism = { ...defaultMechanism, ...currentMechanism, ...newMechanism };\n\n  if (newMechanism && 'data' in newMechanism) {\n    const mergedData = { ...currentMechanism?.data, ...newMechanism.data };\n    exceptionValue0.mechanism.data = mergedData;\n  }\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\ninterface SemVer {\n  major?: number;\n  minor?: number;\n  patch?: number;\n  prerelease?: string;\n  buildmetadata?: string;\n}\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nexport function parseSemver(input: string): SemVer {\n  const match = input.match(SEMVER_REGEXP) || [];\n  const major = parseInt(match[1], 10);\n  const minor = parseInt(match[2], 10);\n  const patch = parseInt(match[3], 10);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4],\n  };\n}\n\nconst defaultRetryAfter = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param now current unix timestamp\n * @param header string representation of 'Retry-After' header\n */\nexport function parseRetryAfterHeader(now: number, header?: string | number | null): number {\n  if (!header) {\n    return defaultRetryAfter;\n  }\n\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return defaultRetryAfter;\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nexport function addContextToFrame(lines: string[], frame: StackFrame, linesOfContext: number = 5): void {\n  const lineno = frame.lineno || 0;\n  const maxLines = lines.length;\n  const sourceLine = Math.max(Math.min(maxLines, lineno - 1), 0);\n\n  frame.pre_context = lines\n    .slice(Math.max(0, sourceLine - linesOfContext), sourceLine)\n    .map((line: string) => snipLine(line, 0));\n\n  frame.context_line = snipLine(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n\n  frame.post_context = lines\n    .slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext)\n    .map((line: string) => snipLine(line, 0));\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nexport function stripUrlQueryAndFragment(urlPath: string): string {\n  // eslint-disable-next-line no-useless-escape\n  return urlPath.split(/[\\?#]/, 1)[0];\n}\n\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */\nexport function checkOrSetAlreadyCaught(exception: unknown): boolean {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if ((exception as any)?.__sentry_captured__) {\n    return true;\n  }\n\n  try {\n    // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n    // `ExtraErrorData` integration\n    Object.defineProperty(exception, '__sentry_captured__', {\n      value: true,\n    });\n  } catch (err) {\n    // `exception` is a primitive, so we can't mark it seen\n  }\n\n  return false;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}