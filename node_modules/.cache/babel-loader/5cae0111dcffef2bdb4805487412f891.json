{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  open: false,\n  level: \"info\",\n  title: \"\",\n  body: \"\",\n  onCloseLabel: \"\",\n  onClickLabel: \"global:label.button.understood\",\n  onClick: undefined,\n  onClose: undefined\n};\nconst notificationSlice = createSlice({\n  name: \"notification\",\n  initialState,\n  reducers: {\n    showNotification: (state, _ref) => {\n      var _payload$onCloseLabel, _payload$onClickLabel, _payload$onClick, _payload$onClose;\n\n      let {\n        payload\n      } = _ref;\n      state.open = true;\n      state.level = payload.level;\n      state.title = payload.title;\n      state.body = payload.body;\n      state.onCloseLabel = (_payload$onCloseLabel = payload.onCloseLabel) !== null && _payload$onCloseLabel !== void 0 ? _payload$onCloseLabel : state.onCloseLabel;\n      state.onClickLabel = (_payload$onClickLabel = payload.onClickLabel) !== null && _payload$onClickLabel !== void 0 ? _payload$onClickLabel : state.onClickLabel;\n      state.onClick = (_payload$onClick = payload.onClick) !== null && _payload$onClick !== void 0 ? _payload$onClick : state.onClick;\n      state.onClose = (_payload$onClose = payload.onClose) !== null && _payload$onClose !== void 0 ? _payload$onClose : state.onClose;\n    },\n    hideNotification: state => {\n      state.level = initialState.level;\n      state.title = initialState.title;\n      state.body = initialState.body;\n      state.onCloseLabel = initialState.onCloseLabel;\n      state.onClickLabel = initialState.onClickLabel;\n      state.onClick = initialState.onClick;\n      state.onClose = initialState.onClose;\n      state.open = false;\n    }\n  }\n});\nexport default notificationSlice.reducer;\nexport const actions = notificationSlice.actions;\nexport const notificationSelector = state => state.notification;","map":{"version":3,"sources":["/home/nahuel/pickers-admin-front/src/reducers/notification.ts"],"names":["createSlice","initialState","open","level","title","body","onCloseLabel","onClickLabel","onClick","undefined","onClose","notificationSlice","name","reducers","showNotification","state","payload","hideNotification","reducer","actions","notificationSelector","notification"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAIA,MAAMC,YAAmC,GAAG;AAC1CC,EAAAA,IAAI,EAAE,KADoC;AAE1CC,EAAAA,KAAK,EAAE,MAFmC;AAG1CC,EAAAA,KAAK,EAAE,EAHmC;AAI1CC,EAAAA,IAAI,EAAE,EAJoC;AAK1CC,EAAAA,YAAY,EAAE,EAL4B;AAM1CC,EAAAA,YAAY,EAAE,gCAN4B;AAO1CC,EAAAA,OAAO,EAAEC,SAPiC;AAQ1CC,EAAAA,OAAO,EAAED;AARiC,CAA5C;AAWA,MAAME,iBAAiB,GAAGX,WAAW,CAAC;AACpCY,EAAAA,IAAI,EAAE,cAD8B;AAEpCX,EAAAA,YAFoC;AAGpCY,EAAAA,QAAQ,EAAE;AACRC,IAAAA,gBAAgB,EAAE,CAChBC,KADgB,WAGb;AAAA;;AAAA,UADH;AAAEC,QAAAA;AAAF,OACG;AACHD,MAAAA,KAAK,CAACb,IAAN,GAAa,IAAb;AACAa,MAAAA,KAAK,CAACZ,KAAN,GAAca,OAAO,CAACb,KAAtB;AACAY,MAAAA,KAAK,CAACX,KAAN,GAAcY,OAAO,CAACZ,KAAtB;AACAW,MAAAA,KAAK,CAACV,IAAN,GAAaW,OAAO,CAACX,IAArB;AACAU,MAAAA,KAAK,CAACT,YAAN,4BAAqBU,OAAO,CAACV,YAA7B,yEAA6CS,KAAK,CAACT,YAAnD;AACAS,MAAAA,KAAK,CAACR,YAAN,4BAAqBS,OAAO,CAACT,YAA7B,yEAA6CQ,KAAK,CAACR,YAAnD;AACAQ,MAAAA,KAAK,CAACP,OAAN,uBAAgBQ,OAAO,CAACR,OAAxB,+DAAmCO,KAAK,CAACP,OAAzC;AACAO,MAAAA,KAAK,CAACL,OAAN,uBAAgBM,OAAO,CAACN,OAAxB,+DAAmCK,KAAK,CAACL,OAAzC;AACD,KAbO;AAcRO,IAAAA,gBAAgB,EAAGF,KAAD,IAAkC;AAClDA,MAAAA,KAAK,CAACZ,KAAN,GAAcF,YAAY,CAACE,KAA3B;AACAY,MAAAA,KAAK,CAACX,KAAN,GAAcH,YAAY,CAACG,KAA3B;AACAW,MAAAA,KAAK,CAACV,IAAN,GAAaJ,YAAY,CAACI,IAA1B;AACAU,MAAAA,KAAK,CAACT,YAAN,GAAqBL,YAAY,CAACK,YAAlC;AACAS,MAAAA,KAAK,CAACR,YAAN,GAAqBN,YAAY,CAACM,YAAlC;AACAQ,MAAAA,KAAK,CAACP,OAAN,GAAgBP,YAAY,CAACO,OAA7B;AACAO,MAAAA,KAAK,CAACL,OAAN,GAAgBT,YAAY,CAACS,OAA7B;AACAK,MAAAA,KAAK,CAACb,IAAN,GAAa,KAAb;AACD;AAvBO;AAH0B,CAAD,CAArC;AA8BA,eAAeS,iBAAiB,CAACO,OAAjC;AAEA,OAAO,MAAMC,OAAO,GAAGR,iBAAiB,CAACQ,OAAlC;AAEP,OAAO,MAAMC,oBAAoB,GAAIL,KAAD,IAAsBA,KAAK,CAACM,YAAzD","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"store\";\nimport { NotificationStateType } from \"./types/notification\";\n\nconst initialState: NotificationStateType = {\n  open: false,\n  level: \"info\",\n  title: \"\",\n  body: \"\",\n  onCloseLabel: \"\",\n  onClickLabel: \"global:label.button.understood\",\n  onClick: undefined,\n  onClose: undefined,\n};\n\nconst notificationSlice = createSlice({\n  name: \"notification\",\n  initialState,\n  reducers: {\n    showNotification: (\n      state: NotificationStateType,\n      { payload }: PayloadAction<NotificationStateType>\n    ) => {\n      state.open = true;\n      state.level = payload.level;\n      state.title = payload.title;\n      state.body = payload.body;\n      state.onCloseLabel = payload.onCloseLabel ?? state.onCloseLabel;\n      state.onClickLabel = payload.onClickLabel ?? state.onClickLabel;\n      state.onClick = payload.onClick ?? state.onClick;\n      state.onClose = payload.onClose ?? state.onClose;\n    },\n    hideNotification: (state: NotificationStateType) => {\n      state.level = initialState.level;\n      state.title = initialState.title;\n      state.body = initialState.body;\n      state.onCloseLabel = initialState.onCloseLabel;\n      state.onClickLabel = initialState.onClickLabel;\n      state.onClick = initialState.onClick;\n      state.onClose = initialState.onClose;\n      state.open = false;\n    },\n  },\n});\n\nexport default notificationSlice.reducer;\n\nexport const actions = notificationSlice.actions;\n\nexport const notificationSelector = (state: RootState) => state.notification;\n"]},"metadata":{},"sourceType":"module"}