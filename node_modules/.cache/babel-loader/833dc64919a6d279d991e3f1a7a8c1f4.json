{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { endsWithAny } from \"utils/endsWithAny\";\nexport const initialState = {\n  fetching: false\n};\nconst SLICE_NAME = \"login\";\n\nconst isRequestAction = action => {\n  const {\n    type\n  } = action;\n  return type.startsWith(SLICE_NAME) && type.endsWith(\"Request\");\n};\n\nconst isResponseAction = action => {\n  const {\n    type\n  } = action;\n  return type.startsWith(SLICE_NAME) && endsWithAny(type, [\"Error\", \"Success\"]);\n};\n\nexport const loginSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    getLoginRequest: (state, action) => {},\n    getLoginSuccess: state => {},\n    getLoginError: () => {},\n    getLoginEmailRequest: (state, action) => {},\n    getLoginEmailSuccess: state => {},\n    getLoginEmailError: () => {},\n    getLoginRestoreRequest: (state, action) => {},\n    getLoginRestoreSuccess: state => {},\n    getLoginREstoreError: () => {},\n    logout: state => {\n      state = initialState;\n    }\n  },\n  extraReducers: builder => builder.addMatcher(isRequestAction, state => {\n    state.fetching = true;\n  }).addMatcher(isResponseAction, state => {\n    state.fetching = false;\n  })\n});\nexport default loginSlice.reducer;\nexport const loginSelector = state => state.login;\nexport const actions = loginSlice.actions;","map":{"version":3,"sources":["/home/nahuel/pickers-admin-front/src/reducers/login.ts"],"names":["createSlice","endsWithAny","initialState","fetching","SLICE_NAME","isRequestAction","action","type","startsWith","endsWith","isResponseAction","loginSlice","name","reducers","getLoginRequest","state","getLoginSuccess","getLoginError","getLoginEmailRequest","getLoginEmailSuccess","getLoginEmailError","getLoginRestoreRequest","getLoginRestoreSuccess","getLoginREstoreError","logout","extraReducers","builder","addMatcher","reducer","loginSelector","login","actions"],"mappings":"AAAA,SAAiBA,WAAjB,QAAmD,kBAAnD;AAIA,SAASC,WAAT,QAA4B,mBAA5B;AAGA,OAAO,MAAMC,YAA4B,GAAG;AAC1CC,EAAAA,QAAQ,EAAE;AADgC,CAArC;AAIP,MAAMC,UAAU,GAAG,OAAnB;;AAEA,MAAMC,eAAe,GAAIC,MAAD,IAA4B;AAClD,QAAM;AAAEC,IAAAA;AAAF,MAAWD,MAAjB;AACA,SAAOC,IAAI,CAACC,UAAL,CAAgBJ,UAAhB,KAA+BG,IAAI,CAACE,QAAL,CAAc,SAAd,CAAtC;AACD,CAHD;;AAKA,MAAMC,gBAAgB,GAAIJ,MAAD,IAA4B;AACnD,QAAM;AAAEC,IAAAA;AAAF,MAAWD,MAAjB;AACA,SAAOC,IAAI,CAACC,UAAL,CAAgBJ,UAAhB,KAA+BH,WAAW,CAACM,IAAD,EAAO,CAAC,OAAD,EAAU,SAAV,CAAP,CAAjD;AACD,CAHD;;AAKA,OAAO,MAAMI,UAAU,GAAGX,WAAW,CAAC;AACpCY,EAAAA,IAAI,EAAER,UAD8B;AAEpCF,EAAAA,YAFoC;AAGpCW,EAAAA,QAAQ,EAAE;AACRC,IAAAA,eAAe,EAAE,CACfC,KADe,EAEfT,MAFe,KAGZ,CAAE,CAJC;AAKRU,IAAAA,eAAe,EAAGD,KAAD,IAA2B,CAAE,CALtC;AAMRE,IAAAA,aAAa,EAAE,MAAM,CAAE,CANf;AAORC,IAAAA,oBAAoB,EAAE,CACpBH,KADoB,EAEpBT,MAFoB,KAGjB,CAAE,CAVC;AAWRa,IAAAA,oBAAoB,EAAGJ,KAAD,IAA2B,CAAE,CAX3C;AAYRK,IAAAA,kBAAkB,EAAE,MAAM,CAAE,CAZpB;AAaRC,IAAAA,sBAAsB,EAAE,CACtBN,KADsB,EAEtBT,MAFsB,KAGnB,CAAE,CAhBC;AAiBRgB,IAAAA,sBAAsB,EAAGP,KAAD,IAA2B,CAAE,CAjB7C;AAkBRQ,IAAAA,oBAAoB,EAAE,MAAM,CAAE,CAlBtB;AAmBRC,IAAAA,MAAM,EAAGT,KAAD,IAA2B;AACjCA,MAAAA,KAAK,GAAGb,YAAR;AACD;AArBO,GAH0B;AA0BpCuB,EAAAA,aAAa,EAAGC,OAAD,IACbA,OAAO,CACJC,UADH,CACctB,eADd,EACgCU,KAAD,IAA2B;AACtDA,IAAAA,KAAK,CAACZ,QAAN,GAAiB,IAAjB;AACD,GAHH,EAIGwB,UAJH,CAIcjB,gBAJd,EAIiCK,KAAD,IAA2B;AACvDA,IAAAA,KAAK,CAACZ,QAAN,GAAiB,KAAjB;AACD,GANH;AA3BkC,CAAD,CAA9B;AAoCP,eAAeQ,UAAU,CAACiB,OAA1B;AAEA,OAAO,MAAMC,aAAa,GAAId,KAAD,IAAsBA,KAAK,CAACe,KAAlD;AAEP,OAAO,MAAMC,OAAO,GAAGpB,UAAU,CAACoB,OAA3B","sourcesContent":["import { Action, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { LoginType } from \"pages/login/types\";\nimport { EmailType } from \"sagas/types/login\";\nimport { RootState } from \"store\";\nimport { endsWithAny } from \"utils/endsWithAny\";\nimport { LoginStateType, RestorePasswordActionsTypes } from \"./types/login\";\n\nexport const initialState: LoginStateType = {\n  fetching: false,\n};\n\nconst SLICE_NAME = \"login\";\n\nconst isRequestAction = (action: Action<string>) => {\n  const { type } = action;\n  return type.startsWith(SLICE_NAME) && type.endsWith(\"Request\");\n};\n\nconst isResponseAction = (action: Action<string>) => {\n  const { type } = action;\n  return type.startsWith(SLICE_NAME) && endsWithAny(type, [\"Error\", \"Success\"]);\n};\n\nexport const loginSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    getLoginRequest: (\n      state: LoginStateType,\n      action: PayloadAction<LoginType>\n    ) => {},\n    getLoginSuccess: (state: LoginStateType) => {},\n    getLoginError: () => {},\n    getLoginEmailRequest: (\n      state: LoginStateType,\n      action: PayloadAction<EmailType>\n    ) => {},\n    getLoginEmailSuccess: (state: LoginStateType) => {},\n    getLoginEmailError: () => {},\n    getLoginRestoreRequest: (\n      state: LoginStateType,\n      action: PayloadAction<RestorePasswordActionsTypes>\n    ) => {},\n    getLoginRestoreSuccess: (state: LoginStateType) => {},\n    getLoginREstoreError: () => {},\n    logout: (state: LoginStateType) => {\n      state = initialState;\n    },\n  },\n  extraReducers: (builder) =>\n    builder\n      .addMatcher(isRequestAction, (state: LoginStateType) => {\n        state.fetching = true;\n      })\n      .addMatcher(isResponseAction, (state: LoginStateType) => {\n        state.fetching = false;\n      }),\n});\n\nexport default loginSlice.reducer;\n\nexport const loginSelector = (state: RootState) => state.login;\n\nexport const actions = loginSlice.actions;\n"]},"metadata":{},"sourceType":"module"}