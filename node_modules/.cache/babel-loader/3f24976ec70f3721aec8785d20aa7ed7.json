{"ast":null,"code":"/**\n * Session Status\n */\nexport var SessionStatus;\n\n(function (SessionStatus) {\n  /** JSDoc */\n  SessionStatus[\"Ok\"] = \"ok\";\n  /** JSDoc */\n\n  SessionStatus[\"Exited\"] = \"exited\";\n  /** JSDoc */\n\n  SessionStatus[\"Crashed\"] = \"crashed\";\n  /** JSDoc */\n\n  SessionStatus[\"Abnormal\"] = \"abnormal\";\n})(SessionStatus || (SessionStatus = {}));\n\nexport var RequestSessionStatus;\n\n(function (RequestSessionStatus) {\n  /** JSDoc */\n  RequestSessionStatus[\"Ok\"] = \"ok\";\n  /** JSDoc */\n\n  RequestSessionStatus[\"Errored\"] = \"errored\";\n  /** JSDoc */\n\n  RequestSessionStatus[\"Crashed\"] = \"crashed\";\n})(RequestSessionStatus || (RequestSessionStatus = {}));","map":{"version":3,"sources":["../src/session.ts"],"names":[],"mappings":"AAyDA;;AAEG;AACH,OAAA,IAAY,aAAZ;;AAAA,CAAA,UAAY,aAAZ,EAAyB;AACvB;AACA,EAAA,aAAA,CAAA,IAAA,CAAA,GAAA,IAAA;AACA;;AACA,EAAA,aAAA,CAAA,QAAA,CAAA,GAAA,QAAA;AACA;;AACA,EAAA,aAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA;;AACA,EAAA,aAAA,CAAA,UAAA,CAAA,GAAA,UAAA;AACD,CATD,EAAY,aAAa,KAAb,aAAa,GAAA,EAAA,CAAzB;;AAWA,OAAA,IAAY,oBAAZ;;AAAA,CAAA,UAAY,oBAAZ,EAAgC;AAC9B;AACA,EAAA,oBAAA,CAAA,IAAA,CAAA,GAAA,IAAA;AACA;;AACA,EAAA,oBAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA;;AACA,EAAA,oBAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACD,CAPD,EAAY,oBAAoB,KAApB,oBAAoB,GAAA,EAAA,CAAhC","sourcesContent":["import { User } from './user';\n\n/**\n * @inheritdoc\n */\nexport interface Session extends SessionContext {\n  /** JSDoc */\n  update(context?: SessionContext): void;\n\n  /** JSDoc */\n  close(status?: SessionStatus): void;\n\n  /** JSDoc */\n  toJSON(): {\n    init: boolean;\n    sid: string;\n    did?: string;\n    timestamp: string;\n    started: string;\n    duration?: number;\n    status: SessionStatus;\n    errors: number;\n    attrs?: {\n      release?: string;\n      environment?: string;\n      user_agent?: string;\n      ip_address?: string;\n    };\n  };\n}\n\nexport interface RequestSession {\n  status?: RequestSessionStatus;\n}\n\n/**\n * Session Context\n */\nexport interface SessionContext {\n  sid?: string;\n  did?: string;\n  init?: boolean;\n  // seconds since the UNIX epoch\n  timestamp?: number;\n  // seconds since the UNIX epoch\n  started?: number;\n  duration?: number;\n  status?: SessionStatus;\n  release?: string;\n  environment?: string;\n  userAgent?: string;\n  ipAddress?: string;\n  errors?: number;\n  user?: User | null;\n  ignoreDuration?: boolean;\n}\n\n/**\n * Session Status\n */\nexport enum SessionStatus {\n  /** JSDoc */\n  Ok = 'ok',\n  /** JSDoc */\n  Exited = 'exited',\n  /** JSDoc */\n  Crashed = 'crashed',\n  /** JSDoc */\n  Abnormal = 'abnormal',\n}\n\nexport enum RequestSessionStatus {\n  /** JSDoc */\n  Ok = 'ok',\n  /** JSDoc */\n  Errored = 'errored',\n  /** JSDoc */\n  Crashed = 'crashed',\n}\n\n/** JSDoc */\nexport interface SessionAggregates {\n  attrs?: {\n    environment?: string;\n    release?: string;\n  };\n  aggregates: Array<AggregationCounts>;\n}\n\nexport interface SessionFlusherLike {\n  /**\n   * Increments the Session Status bucket in SessionAggregates Object corresponding to the status of the session\n   * captured\n   */\n  incrementSessionStatusCount(): void;\n\n  /** Submits the aggregates request mode sessions to Sentry */\n  sendSessionAggregates(sessionAggregates: SessionAggregates): void;\n\n  /** Empties Aggregate Buckets and Sends them to Transport Buffer */\n  flush(): void;\n\n  /** Clears setInterval and calls flush */\n  close(): void;\n}\n\nexport interface AggregationCounts {\n  started: string;\n  errored?: number;\n  exited?: number;\n  crashed?: number;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}