{"ast":null,"code":"import { SessionStatus } from '@sentry/types';\nimport { dropUndefinedKeys, timestampInSeconds, uuid4 } from '@sentry/utils';\n/**\n * @inheritdoc\n */\n\nvar Session =\n/** @class */\nfunction () {\n  function Session(context) {\n    this.errors = 0;\n    this.sid = uuid4();\n    this.duration = 0;\n    this.status = SessionStatus.Ok;\n    this.init = true;\n    this.ignoreDuration = false; // Both timestamp and started are in seconds since the UNIX epoch.\n\n    var startingTime = timestampInSeconds();\n    this.timestamp = startingTime;\n    this.started = startingTime;\n\n    if (context) {\n      this.update(context);\n    }\n  }\n  /** JSDoc */\n  // eslint-disable-next-line complexity\n\n\n  Session.prototype.update = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n\n    if (context.user) {\n      if (!this.ipAddress && context.user.ip_address) {\n        this.ipAddress = context.user.ip_address;\n      }\n\n      if (!this.did && !context.did) {\n        this.did = context.user.id || context.user.email || context.user.username;\n      }\n    }\n\n    this.timestamp = context.timestamp || timestampInSeconds();\n\n    if (context.ignoreDuration) {\n      this.ignoreDuration = context.ignoreDuration;\n    }\n\n    if (context.sid) {\n      // Good enough uuid validation. — Kamil\n      this.sid = context.sid.length === 32 ? context.sid : uuid4();\n    }\n\n    if (context.init !== undefined) {\n      this.init = context.init;\n    }\n\n    if (!this.did && context.did) {\n      this.did = \"\" + context.did;\n    }\n\n    if (typeof context.started === 'number') {\n      this.started = context.started;\n    }\n\n    if (this.ignoreDuration) {\n      this.duration = undefined;\n    } else if (typeof context.duration === 'number') {\n      this.duration = context.duration;\n    } else {\n      var duration = this.timestamp - this.started;\n      this.duration = duration >= 0 ? duration : 0;\n    }\n\n    if (context.release) {\n      this.release = context.release;\n    }\n\n    if (context.environment) {\n      this.environment = context.environment;\n    }\n\n    if (!this.ipAddress && context.ipAddress) {\n      this.ipAddress = context.ipAddress;\n    }\n\n    if (!this.userAgent && context.userAgent) {\n      this.userAgent = context.userAgent;\n    }\n\n    if (typeof context.errors === 'number') {\n      this.errors = context.errors;\n    }\n\n    if (context.status) {\n      this.status = context.status;\n    }\n  };\n  /** JSDoc */\n\n\n  Session.prototype.close = function (status) {\n    if (status) {\n      this.update({\n        status: status\n      });\n    } else if (this.status === SessionStatus.Ok) {\n      this.update({\n        status: SessionStatus.Exited\n      });\n    } else {\n      this.update();\n    }\n  };\n  /** JSDoc */\n\n\n  Session.prototype.toJSON = function () {\n    return dropUndefinedKeys({\n      sid: \"\" + this.sid,\n      init: this.init,\n      // Make sure that sec is converted to ms for date constructor\n      started: new Date(this.started * 1000).toISOString(),\n      timestamp: new Date(this.timestamp * 1000).toISOString(),\n      status: this.status,\n      errors: this.errors,\n      did: typeof this.did === 'number' || typeof this.did === 'string' ? \"\" + this.did : undefined,\n      duration: this.duration,\n      attrs: dropUndefinedKeys({\n        release: this.release,\n        environment: this.environment,\n        ip_address: this.ipAddress,\n        user_agent: this.userAgent\n      })\n    });\n  };\n\n  return Session;\n}();\n\nexport { Session };","map":{"version":3,"sources":["../src/session.ts"],"names":[],"mappings":"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","sourcesContent":["import { Session as SessionInterface, SessionContext, SessionStatus } from '@sentry/types';\nimport { dropUndefinedKeys, timestampInSeconds, uuid4 } from '@sentry/utils';\n\n/**\n * @inheritdoc\n */\nexport class Session implements SessionInterface {\n  public userAgent?: string;\n  public errors: number = 0;\n  public release?: string;\n  public sid: string = uuid4();\n  public did?: string;\n  public timestamp: number;\n  public started: number;\n  public duration?: number = 0;\n  public status: SessionStatus = SessionStatus.Ok;\n  public environment?: string;\n  public ipAddress?: string;\n  public init: boolean = true;\n  public ignoreDuration: boolean = false;\n\n  public constructor(context?: Omit<SessionContext, 'started' | 'status'>) {\n    // Both timestamp and started are in seconds since the UNIX epoch.\n    const startingTime = timestampInSeconds();\n    this.timestamp = startingTime;\n    this.started = startingTime;\n    if (context) {\n      this.update(context);\n    }\n  }\n\n  /** JSDoc */\n  // eslint-disable-next-line complexity\n  public update(context: SessionContext = {}): void {\n    if (context.user) {\n      if (!this.ipAddress && context.user.ip_address) {\n        this.ipAddress = context.user.ip_address;\n      }\n\n      if (!this.did && !context.did) {\n        this.did = context.user.id || context.user.email || context.user.username;\n      }\n    }\n\n    this.timestamp = context.timestamp || timestampInSeconds();\n    if (context.ignoreDuration) {\n      this.ignoreDuration = context.ignoreDuration;\n    }\n    if (context.sid) {\n      // Good enough uuid validation. — Kamil\n      this.sid = context.sid.length === 32 ? context.sid : uuid4();\n    }\n    if (context.init !== undefined) {\n      this.init = context.init;\n    }\n    if (!this.did && context.did) {\n      this.did = `${context.did}`;\n    }\n    if (typeof context.started === 'number') {\n      this.started = context.started;\n    }\n    if (this.ignoreDuration) {\n      this.duration = undefined;\n    } else if (typeof context.duration === 'number') {\n      this.duration = context.duration;\n    } else {\n      const duration = this.timestamp - this.started;\n      this.duration = duration >= 0 ? duration : 0;\n    }\n    if (context.release) {\n      this.release = context.release;\n    }\n    if (context.environment) {\n      this.environment = context.environment;\n    }\n    if (!this.ipAddress && context.ipAddress) {\n      this.ipAddress = context.ipAddress;\n    }\n    if (!this.userAgent && context.userAgent) {\n      this.userAgent = context.userAgent;\n    }\n    if (typeof context.errors === 'number') {\n      this.errors = context.errors;\n    }\n    if (context.status) {\n      this.status = context.status;\n    }\n  }\n\n  /** JSDoc */\n  public close(status?: Exclude<SessionStatus, SessionStatus.Ok>): void {\n    if (status) {\n      this.update({ status });\n    } else if (this.status === SessionStatus.Ok) {\n      this.update({ status: SessionStatus.Exited });\n    } else {\n      this.update();\n    }\n  }\n\n  /** JSDoc */\n  public toJSON(): {\n    init: boolean;\n    sid: string;\n    did?: string;\n    timestamp: string;\n    started: string;\n    duration?: number;\n    status: SessionStatus;\n    errors: number;\n    attrs?: {\n      release?: string;\n      environment?: string;\n      user_agent?: string;\n      ip_address?: string;\n    };\n  } {\n    return dropUndefinedKeys({\n      sid: `${this.sid}`,\n      init: this.init,\n      // Make sure that sec is converted to ms for date constructor\n      started: new Date(this.started * 1000).toISOString(),\n      timestamp: new Date(this.timestamp * 1000).toISOString(),\n      status: this.status,\n      errors: this.errors,\n      did: typeof this.did === 'number' || typeof this.did === 'string' ? `${this.did}` : undefined,\n      duration: this.duration,\n      attrs: dropUndefinedKeys({\n        release: this.release,\n        environment: this.environment,\n        ip_address: this.ipAddress,\n        user_agent: this.userAgent,\n      }),\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}