{"ast":null,"code":"import { SentryError } from './error';\nimport { SyncPromise } from './syncpromise';\n/** A simple queue that holds promises. */\n\nvar PromiseBuffer =\n/** @class */\nfunction () {\n  function PromiseBuffer(_limit) {\n    this._limit = _limit;\n    /** Internal set of queued Promises */\n\n    this._buffer = [];\n  }\n  /**\n   * Says if the buffer is ready to take more requests\n   */\n\n\n  PromiseBuffer.prototype.isReady = function () {\n    return this._limit === undefined || this.length() < this._limit;\n  };\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n\n\n  PromiseBuffer.prototype.add = function (taskProducer) {\n    var _this = this;\n\n    if (!this.isReady()) {\n      return SyncPromise.reject(new SentryError('Not adding Promise due to buffer limit reached.'));\n    } // start the task and add its promise to the queue\n\n\n    var task = taskProducer();\n\n    if (this._buffer.indexOf(task) === -1) {\n      this._buffer.push(task);\n    }\n\n    void task.then(function () {\n      return _this.remove(task);\n    }) // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n    // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n    // have promises, so TS has to polyfill when down-compiling.)\n    .then(null, function () {\n      return _this.remove(task).then(null, function () {// We have to add another catch here because `this.remove()` starts a new promise chain.\n      });\n    });\n    return task;\n  };\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n\n\n  PromiseBuffer.prototype.remove = function (task) {\n    var removedTask = this._buffer.splice(this._buffer.indexOf(task), 1)[0];\n\n    return removedTask;\n  };\n  /**\n   * This function returns the number of unresolved promises in the queue.\n   */\n\n\n  PromiseBuffer.prototype.length = function () {\n    return this._buffer.length;\n  };\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n\n\n  PromiseBuffer.prototype.drain = function (timeout) {\n    var _this = this;\n\n    return new SyncPromise(function (resolve) {\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      var capturedSetTimeout = setTimeout(function () {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout); // if all promises resolve in time, cancel the timer and resolve to `true`\n\n      void SyncPromise.all(_this._buffer).then(function () {\n        clearTimeout(capturedSetTimeout);\n        resolve(true);\n      }).then(null, function () {\n        resolve(true);\n      });\n    });\n  };\n\n  return PromiseBuffer;\n}();\n\nexport { PromiseBuffer };","map":{"version":3,"sources":["../src/promisebuffer.ts"],"names":[],"mappings":"AAAA,SAAS,WAAT,QAA4B,SAA5B;AACA,SAAS,WAAT,QAA4B,eAA5B;AAEA;;AACA,IAAA,aAAA;AAAA;AAAA,YAAA;AAIE,WAAA,aAAA,CAA6B,MAA7B,EAA4C;AAAf,SAAA,MAAA,GAAA,MAAA;AAH7B;;AACiB,SAAA,OAAA,GAAiC,EAAjC;AAE+B;AAEhD;;AAEG;;;AACI,EAAA,aAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACE,WAAO,KAAK,MAAL,KAAgB,SAAhB,IAA6B,KAAK,MAAL,KAAgB,KAAK,MAAzD;AACD,GAFM;AAIP;;;;;;;;;AASG;;;AACI,EAAA,aAAA,CAAA,SAAA,CAAA,GAAA,GAAP,UAAW,YAAX,EAA6C;AAA7C,QAAA,KAAA,GAAA,IAAA;;AACE,QAAI,CAAC,KAAK,OAAL,EAAL,EAAqB;AACnB,aAAO,WAAW,CAAC,MAAZ,CAAmB,IAAI,WAAJ,CAAgB,iDAAhB,CAAnB,CAAP;AACD,KAH0C,CAK3C;;;AACA,QAAM,IAAI,GAAG,YAAY,EAAzB;;AACA,QAAI,KAAK,OAAL,CAAa,OAAb,CAAqB,IAArB,MAA+B,CAAC,CAApC,EAAuC;AACrC,WAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB;AACD;;AACD,SAAK,IAAI,CACN,IADE,CACG,YAAA;AAAM,aAAA,KAAI,CAAC,MAAL,CAAA,IAAA,CAAA;AAAiB,KAD1B,EAEH;AACA;AACA;AAJG,KAKF,IALE,CAKG,IALH,EAKS,YAAA;AACV,aAAA,KAAI,CAAC,MAAL,CAAY,IAAZ,EAAkB,IAAlB,CAAuB,IAAvB,EAA6B,YAAA,CAC3B;AACD,OAFD,CAAA;AAEE,KARD,CAAL;AAUA,WAAO,IAAP;AACD,GArBM;AAuBP;;;;;AAKG;;;AACI,EAAA,aAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,IAAd,EAAkC;AAChC,QAAM,WAAW,GAAG,KAAK,OAAL,CAAa,MAAb,CAAoB,KAAK,OAAL,CAAa,OAAb,CAAqB,IAArB,CAApB,EAAgD,CAAhD,EAAmD,CAAnD,CAApB;;AACA,WAAO,WAAP;AACD,GAHM;AAKP;;AAEG;;;AACI,EAAA,aAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACE,WAAO,KAAK,OAAL,CAAa,MAApB;AACD,GAFM;AAIP;;;;;;;;AAQG;;;AACI,EAAA,aAAA,CAAA,SAAA,CAAA,KAAA,GAAP,UAAa,OAAb,EAA6B;AAA7B,QAAA,KAAA,GAAA,IAAA;;AACE,WAAO,IAAI,WAAJ,CAAyB,UAAA,OAAA,EAAO;AACrC;AACA,UAAM,kBAAkB,GAAG,UAAU,CAAC,YAAA;AACpC,YAAI,OAAO,IAAI,OAAO,GAAG,CAAzB,EAA4B;AAC1B,UAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF,OAJoC,EAIlC,OAJkC,CAArC,CAFqC,CAQrC;;AACA,WAAK,WAAW,CAAC,GAAZ,CAAgB,KAAI,CAAC,OAArB,EACF,IADE,CACG,YAAA;AACJ,QAAA,YAAY,CAAC,kBAAD,CAAZ;AACA,QAAA,OAAO,CAAC,IAAD,CAAP;AACD,OAJE,EAKF,IALE,CAKG,IALH,EAKS,YAAA;AACV,QAAA,OAAO,CAAC,IAAD,CAAP;AACD,OAPE,CAAL;AAQD,KAjBM,CAAP;AAkBD,GAnBM;;AAoBT,SAAA,aAAA;AAAC,CA7FD,EAAA","sourcesContent":["import { SentryError } from './error';\nimport { SyncPromise } from './syncpromise';\n\n/** A simple queue that holds promises. */\nexport class PromiseBuffer<T> {\n  /** Internal set of queued Promises */\n  private readonly _buffer: Array<PromiseLike<T>> = [];\n\n  public constructor(protected _limit?: number) {}\n\n  /**\n   * Says if the buffer is ready to take more requests\n   */\n  public isReady(): boolean {\n    return this._limit === undefined || this.length() < this._limit;\n  }\n\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  public add(taskProducer: () => PromiseLike<T>): PromiseLike<T> {\n    if (!this.isReady()) {\n      return SyncPromise.reject(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n\n    // start the task and add its promise to the queue\n    const task = taskProducer();\n    if (this._buffer.indexOf(task) === -1) {\n      this._buffer.push(task);\n    }\n    void task\n      .then(() => this.remove(task))\n      // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n      // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n      // have promises, so TS has to polyfill when down-compiling.)\n      .then(null, () =>\n        this.remove(task).then(null, () => {\n          // We have to add another catch here because `this.remove()` starts a new promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  public remove(task: PromiseLike<T>): PromiseLike<T> {\n    const removedTask = this._buffer.splice(this._buffer.indexOf(task), 1)[0];\n    return removedTask;\n  }\n\n  /**\n   * This function returns the number of unresolved promises in the queue.\n   */\n  public length(): number {\n    return this._buffer.length;\n  }\n\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  public drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>(resolve => {\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      void SyncPromise.all(this._buffer)\n        .then(() => {\n          clearTimeout(capturedSetTimeout);\n          resolve(true);\n        })\n        .then(null, () => {\n          resolve(true);\n        });\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}