{"ast":null,"code":"import { addExtensionMethods } from './hubextensions';\nimport * as Integrations from './integrations';\nexport { Integrations }; // This is already exported as part of `Integrations` above (and for the moment will remain so for\n// backwards compatibility), but that interferes with treeshaking, so we also export it separately\n// here.\n//\n// Previously we expected users to import tracing integrations like\n//\n// import { Integrations } from '@sentry/tracing';\n// const instance = new Integrations.BrowserTracing();\n//\n// This makes the integrations unable to be treeshaken though. To address this, we now have\n// this individual export. We now expect users to consume BrowserTracing like so:\n//\n// import { BrowserTracing } from '@sentry/tracing';\n// const instance = new BrowserTracing();\n//\n// For an example of of the new usage of BrowserTracing, see @sentry/nextjs index.client.ts\n\nexport { BrowserTracing } from './browser';\nexport { Span } from './span';\nexport { Transaction } from './transaction';\nexport { // TODO deprecate old name in v7\ninstrumentOutgoingRequests as registerRequestInstrumentation, defaultRequestInstrumentationOptions } from './browser';\nexport { SpanStatus } from './spanstatus';\nexport { IdleTransaction } from './idletransaction';\nexport { startIdleTransaction } from './hubextensions'; // We are patching the global object with our hub extension methods\n\naddExtensionMethods();\nexport { addExtensionMethods };\nexport { extractTraceparentData, getActiveTransaction, hasTracingEnabled, stripUrlQueryAndFragment, TRACEPARENT_REGEXP } from './utils';","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"AAAA,SAAS,mBAAT,QAAoC,iBAApC;AACA,OAAO,KAAK,YAAZ,MAA8B,gBAA9B;AAEA,SAAS,YAAT,G,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAS,cAAT,QAA+B,WAA/B;AAEA,SAAS,IAAT,QAAqB,QAArB;AACA,SAAS,WAAT,QAA4B,eAA5B;AACA,SACE;AACA,0BAA0B,IAAI,8BAFhC,EAIE,oCAJF,QAKO,WALP;AAMA,SAAS,UAAT,QAA2B,cAA3B;AACA,SAAS,eAAT,QAAgC,mBAAhC;AACA,SAAS,oBAAT,QAAqC,iBAArC,C,CAEA;;AACA,mBAAmB;AAEnB,SAAS,mBAAT;AAEA,SACE,sBADF,EAEE,oBAFF,EAGE,iBAHF,EAIE,wBAJF,EAKE,kBALF,QAMO,SANP","sourcesContent":["import { addExtensionMethods } from './hubextensions';\nimport * as Integrations from './integrations';\n\nexport { Integrations };\n\n// This is already exported as part of `Integrations` above (and for the moment will remain so for\n// backwards compatibility), but that interferes with treeshaking, so we also export it separately\n// here.\n//\n// Previously we expected users to import tracing integrations like\n//\n// import { Integrations } from '@sentry/tracing';\n// const instance = new Integrations.BrowserTracing();\n//\n// This makes the integrations unable to be treeshaken though. To address this, we now have\n// this individual export. We now expect users to consume BrowserTracing like so:\n//\n// import { BrowserTracing } from '@sentry/tracing';\n// const instance = new BrowserTracing();\n//\n// For an example of of the new usage of BrowserTracing, see @sentry/nextjs index.client.ts\nexport { BrowserTracing } from './browser';\n\nexport { Span } from './span';\nexport { Transaction } from './transaction';\nexport {\n  // TODO deprecate old name in v7\n  instrumentOutgoingRequests as registerRequestInstrumentation,\n  RequestInstrumentationOptions,\n  defaultRequestInstrumentationOptions,\n} from './browser';\nexport { SpanStatus } from './spanstatus';\nexport { IdleTransaction } from './idletransaction';\nexport { startIdleTransaction } from './hubextensions';\n\n// We are patching the global object with our hub extension methods\naddExtensionMethods();\n\nexport { addExtensionMethods };\n\nexport {\n  extractTraceparentData,\n  getActiveTransaction,\n  hasTracingEnabled,\n  stripUrlQueryAndFragment,\n  TRACEPARENT_REGEXP,\n} from './utils';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}