{"ast":null,"code":"export const toBase64 = file => new Promise((resolve, reject) => {\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n\n  reader.onload = () => resolve(reader.result);\n\n  reader.onerror = error => reject(error);\n});\nexport const getBase64FromUrl = async url => {\n  const data = await fetch(url);\n  const blob = await data.blob();\n  return new Promise(resolve => {\n    const reader = new FileReader();\n    reader.readAsDataURL(blob);\n\n    reader.onloadend = () => resolve(reader.result);\n  });\n};\nexport const isBase64 = str => {\n  if (str === \"\" || str.trim() === \"\") return false;\n\n  try {\n    window.atob(str);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};","map":{"version":3,"sources":["/home/nahuel/pickers-admin-front/src/utils/toBase64.ts"],"names":["toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","getBase64FromUrl","url","data","fetch","blob","onloadend","isBase64","str","trim","window","atob","e"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAIC,IAAD,IACtB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,QAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,EAAAA,MAAM,CAACE,aAAP,CAAqBN,IAArB;;AACAI,EAAAA,MAAM,CAACG,MAAP,GAAgB,MAAML,OAAO,CAACE,MAAM,CAACI,MAAR,CAA7B;;AACAJ,EAAAA,MAAM,CAACK,OAAP,GAAkBC,KAAD,IAAWP,MAAM,CAACO,KAAD,CAAlC;AACD,CALD,CADK;AAQP,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,GAAP,IAAuB;AACrD,QAAMC,IAAI,GAAG,MAAMC,KAAK,CAACF,GAAD,CAAxB;AACA,QAAMG,IAAI,GAAG,MAAMF,IAAI,CAACE,IAAL,EAAnB;AACA,SAAO,IAAId,OAAJ,CAAaC,OAAD,IAAa;AAC9B,UAAME,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,IAAAA,MAAM,CAACE,aAAP,CAAqBS,IAArB;;AACAX,IAAAA,MAAM,CAACY,SAAP,GAAmB,MAAMd,OAAO,CAACE,MAAM,CAACI,MAAR,CAAhC;AACD,GAJM,CAAP;AAKD,CARM;AAUP,OAAO,MAAMS,QAAQ,GAAIC,GAAD,IAAiB;AACvC,MAAIA,GAAG,KAAK,EAAR,IAAcA,GAAG,CAACC,IAAJ,OAAe,EAAjC,EAAqC,OAAO,KAAP;;AACrC,MAAI;AACFC,IAAAA,MAAM,CAACC,IAAP,CAAYH,GAAZ;AACA,WAAO,IAAP;AACD,GAHD,CAGE,OAAOI,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF,CARM","sourcesContent":["export const toBase64 = (file: File) =>\n  new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = (error) => reject(error);\n  });\n\nexport const getBase64FromUrl = async (url: string) => {\n  const data = await fetch(url);\n  const blob = await data.blob();\n  return new Promise((resolve) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(blob);\n    reader.onloadend = () => resolve(reader.result);\n  });\n};\n\nexport const isBase64 = (str: string) => {\n  if (str === \"\" || str.trim() === \"\") return false;\n  try {\n    window.atob(str);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}