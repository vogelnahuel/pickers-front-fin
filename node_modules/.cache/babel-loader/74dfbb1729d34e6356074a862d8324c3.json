{"ast":null,"code":"import { fill, isThenable, loadModule, logger } from '@sentry/utils';\n/** Tracing integration for node-postgres package */\n\nvar Postgres =\n/** @class */\nfunction () {\n  function Postgres(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n\n\n    this.name = Postgres.id;\n    this._usePgNative = !!options.usePgNative;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  Postgres.prototype.setupOnce = function (_, getCurrentHub) {\n    var _a;\n\n    var pkg = loadModule('pg');\n\n    if (!pkg) {\n      logger.error('Postgres Integration was unable to require `pg` package.');\n      return;\n    }\n\n    if (this._usePgNative && !((_a = pkg.native) === null || _a === void 0 ? void 0 : _a.Client)) {\n      logger.error(\"Postgres Integration was unable to access 'pg-native' bindings.\");\n      return;\n    }\n\n    var Client = (this._usePgNative ? pkg.native : pkg).Client;\n    /**\n     * function (query, callback) => void\n     * function (query, params, callback) => void\n     * function (query) => Promise\n     * function (query, params) => Promise\n     * function (pg.Cursor) => pg.Cursor\n     */\n\n    fill(Client.prototype, 'query', function (orig) {\n      return function (config, values, callback) {\n        var _a, _b, _c;\n\n        var scope = getCurrentHub().getScope();\n        var parentSpan = (_a = scope) === null || _a === void 0 ? void 0 : _a.getSpan();\n        var span = (_b = parentSpan) === null || _b === void 0 ? void 0 : _b.startChild({\n          description: typeof config === 'string' ? config : config.text,\n          op: \"db\"\n        });\n\n        if (typeof callback === 'function') {\n          return orig.call(this, config, values, function (err, result) {\n            var _a;\n\n            (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n            callback(err, result);\n          });\n        }\n\n        if (typeof values === 'function') {\n          return orig.call(this, config, function (err, result) {\n            var _a;\n\n            (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n            values(err, result);\n          });\n        }\n\n        var rv = typeof values !== 'undefined' ? orig.call(this, config, values) : orig.call(this, config);\n\n        if (isThenable(rv)) {\n          return rv.then(function (res) {\n            var _a;\n\n            (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n            return res;\n          });\n        }\n\n        (_c = span) === null || _c === void 0 ? void 0 : _c.finish();\n        return rv;\n      };\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Postgres.id = 'Postgres';\n  return Postgres;\n}();\n\nexport { Postgres };","map":{"version":3,"sources":["../../../src/integrations/node/postgres.ts"],"names":[],"mappings":"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","sourcesContent":["import { Hub } from '@sentry/hub';\nimport { EventProcessor, Integration } from '@sentry/types';\nimport { fill, isThenable, loadModule, logger } from '@sentry/utils';\n\ninterface PgClient {\n  prototype: {\n    query: () => void | Promise<unknown>;\n  };\n}\n\ninterface PgOptions {\n  usePgNative?: boolean;\n}\n\n/** Tracing integration for node-postgres package */\nexport class Postgres implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Postgres';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Postgres.id;\n\n  private _usePgNative: boolean;\n\n  public constructor(options: PgOptions = {}) {\n    this._usePgNative = !!options.usePgNative;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    const pkg = loadModule<{ Client: PgClient; native: { Client: PgClient } }>('pg');\n\n    if (!pkg) {\n      logger.error('Postgres Integration was unable to require `pg` package.');\n      return;\n    }\n\n    if (this._usePgNative && !pkg.native?.Client) {\n      logger.error(`Postgres Integration was unable to access 'pg-native' bindings.`);\n      return;\n    }\n\n    const { Client } = this._usePgNative ? pkg.native : pkg;\n\n    /**\n     * function (query, callback) => void\n     * function (query, params, callback) => void\n     * function (query) => Promise\n     * function (query, params) => Promise\n     * function (pg.Cursor) => pg.Cursor\n     */\n    fill(Client.prototype, 'query', function(orig: () => void | Promise<unknown>) {\n      return function(this: unknown, config: unknown, values: unknown, callback: unknown) {\n        const scope = getCurrentHub().getScope();\n        const parentSpan = scope?.getSpan();\n        const span = parentSpan?.startChild({\n          description: typeof config === 'string' ? config : (config as { text: string }).text,\n          op: `db`,\n        });\n\n        if (typeof callback === 'function') {\n          return orig.call(this, config, values, function(err: Error, result: unknown) {\n            span?.finish();\n            callback(err, result);\n          });\n        }\n\n        if (typeof values === 'function') {\n          return orig.call(this, config, function(err: Error, result: unknown) {\n            span?.finish();\n            values(err, result);\n          });\n        }\n\n        const rv = typeof values !== 'undefined' ? orig.call(this, config, values) : orig.call(this, config);\n\n        if (isThenable(rv)) {\n          return (rv as Promise<unknown>).then((res: unknown) => {\n            span?.finish();\n            return res;\n          });\n        }\n\n        span?.finish();\n        return rv;\n      };\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}