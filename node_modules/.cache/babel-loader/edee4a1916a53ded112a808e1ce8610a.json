{"ast":null,"code":"/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { bindReporter } from './lib/bindReporter';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nvar reportedMetricIDs = {};\nexport var getLCP = function (onReport, reportAllChanges) {\n  var visibilityWatcher = getVisibilityWatcher();\n  var metric = initMetric('LCP');\n  var report;\n\n  var entryHandler = function (entry) {\n    // The startTime attribute returns the value of the renderTime if it is not 0,\n    // and the value of the loadTime otherwise.\n    var value = entry.startTime; // If the page was hidden prior to paint time of the entry,\n    // ignore it and mark the metric as final, otherwise add the entry.\n\n    if (value < visibilityWatcher.firstHiddenTime) {\n      metric.value = value;\n      metric.entries.push(entry);\n    }\n\n    if (report) {\n      report();\n    }\n  };\n\n  var po = observe('largest-contentful-paint', entryHandler);\n\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n\n    var stopListening_1 = function () {\n      if (!reportedMetricIDs[metric.id]) {\n        po.takeRecords().map(entryHandler);\n        po.disconnect();\n        reportedMetricIDs[metric.id] = true;\n        report(true);\n      }\n    }; // Stop listening after input. Note: while scrolling is an input that\n    // stop LCP observation, it's unreliable since it can be programmatically\n    // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n\n\n    ['keydown', 'click'].forEach(function (type) {\n      addEventListener(type, stopListening_1, {\n        once: true,\n        capture: true\n      });\n    });\n    onHidden(stopListening_1, true);\n  }\n};","map":{"version":3,"sources":["../../../src/browser/web-vitals/getLCP.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,YAAT,QAA6B,oBAA7B;AACA,SAAS,oBAAT,QAAqC,4BAArC;AACA,SAAS,UAAT,QAA2B,kBAA3B;AACA,SAAS,OAAT,QAAiD,eAAjD;AACA,SAAS,QAAT,QAAyB,gBAAzB;AAcA,IAAM,iBAAiB,GAA4B,EAAnD;AAEA,OAAO,IAAM,MAAM,GAAG,UAAC,QAAD,EAA0B,gBAA1B,EAAoD;AACxE,MAAM,iBAAiB,GAAG,oBAAoB,EAA9C;AACA,MAAM,MAAM,GAAG,UAAU,CAAC,KAAD,CAAzB;AACA,MAAI,MAAJ;;AAEA,MAAM,YAAY,GAAG,UAAC,KAAD,EAAwB;AAC3C;AACA;AACA,QAAM,KAAK,GAAG,KAAK,CAAC,SAApB,CAH2C,CAK3C;AACA;;AACA,QAAI,KAAK,GAAG,iBAAiB,CAAC,eAA9B,EAA+C;AAC7C,MAAA,MAAM,CAAC,KAAP,GAAe,KAAf;AACA,MAAA,MAAM,CAAC,OAAP,CAAe,IAAf,CAAoB,KAApB;AACD;;AAED,QAAI,MAAJ,EAAY;AACV,MAAA,MAAM;AACP;AACF,GAfD;;AAiBA,MAAM,EAAE,GAAG,OAAO,CAAC,0BAAD,EAA6B,YAA7B,CAAlB;;AAEA,MAAI,EAAJ,EAAQ;AACN,IAAA,MAAM,GAAG,YAAY,CAAC,QAAD,EAAW,MAAX,EAAmB,gBAAnB,CAArB;;AAEA,QAAM,eAAa,GAAG,YAAA;AACpB,UAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAR,CAAtB,EAAmC;AACjC,QAAA,EAAE,CAAC,WAAH,GAAiB,GAAjB,CAAqB,YAArB;AACA,QAAA,EAAE,CAAC,UAAH;AACA,QAAA,iBAAiB,CAAC,MAAM,CAAC,EAAR,CAAjB,GAA+B,IAA/B;AACA,QAAA,MAAM,CAAC,IAAD,CAAN;AACD;AACF,KAPD,CAHM,CAYN;AACA;AACA;;;AACA,KAAC,SAAD,EAAY,OAAZ,EAAqB,OAArB,CAA6B,UAAA,IAAA,EAAI;AAC/B,MAAA,gBAAgB,CAAC,IAAD,EAAO,eAAP,EAAsB;AAAE,QAAA,IAAI,EAAE,IAAR;AAAc,QAAA,OAAO,EAAE;AAAvB,OAAtB,CAAhB;AACD,KAFD;AAIA,IAAA,QAAQ,CAAC,eAAD,EAAgB,IAAhB,CAAR;AACD;AACF,CA7CM","sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { ReportHandler } from './types';\n\n// https://wicg.github.io/largest-contentful-paint/#sec-largest-contentful-paint-interface\nexport interface LargestContentfulPaint extends PerformanceEntry {\n  renderTime: DOMHighResTimeStamp;\n  loadTime: DOMHighResTimeStamp;\n  size: number;\n  id: string;\n  url: string;\n  element?: Element;\n  toJSON(): Record<string, string>;\n}\n\nconst reportedMetricIDs: Record<string, boolean> = {};\n\nexport const getLCP = (onReport: ReportHandler, reportAllChanges?: boolean): void => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('LCP');\n  let report: ReturnType<typeof bindReporter>;\n\n  const entryHandler = (entry: PerformanceEntry): void => {\n    // The startTime attribute returns the value of the renderTime if it is not 0,\n    // and the value of the loadTime otherwise.\n    const value = entry.startTime;\n\n    // If the page was hidden prior to paint time of the entry,\n    // ignore it and mark the metric as final, otherwise add the entry.\n    if (value < visibilityWatcher.firstHiddenTime) {\n      metric.value = value;\n      metric.entries.push(entry);\n    }\n\n    if (report) {\n      report();\n    }\n  };\n\n  const po = observe('largest-contentful-paint', entryHandler);\n\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n\n    const stopListening = (): void => {\n      if (!reportedMetricIDs[metric.id]) {\n        po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n        po.disconnect();\n        reportedMetricIDs[metric.id] = true;\n        report(true);\n      }\n    };\n\n    // Stop listening after input. Note: while scrolling is an input that\n    // stop LCP observation, it's unreliable since it can be programmatically\n    // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n    ['keydown', 'click'].forEach(type => {\n      addEventListener(type, stopListening, { once: true, capture: true });\n    });\n\n    onHidden(stopListening, true);\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}