{"ast":null,"code":"import { createBrowserHistory } from \"history\";\nimport { routerMiddleware } from \"connected-react-router\";\nimport createSagaMiddleware from \"@redux-saga/core\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport rootSaga from \"./sagas\"; // Se obtienen todos los reducers\n\nimport rootReducer from \"reducers\";\nconst sagaMiddleware = createSagaMiddleware();\nexport const history = createBrowserHistory(); // Crea el store de redux y configura autom치ticamente la extensi칩n Redux DevTools\n\nexport const store = configureStore({\n  reducer: rootReducer(history),\n  devTools: process.env.NODE_ENV !== \"production\",\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    thunk: false,\n    serializableCheck: false\n  }).concat(sagaMiddleware).concat(routerMiddleware(history))\n}); // Inicio el middleware de saga\n\nsagaMiddleware.run(rootSaga); // Infiero el `RootState` y `AppDispatch` directamente desde la store","map":{"version":3,"sources":["/home/nahuel/pickers-admin-front/src/store.ts"],"names":["createBrowserHistory","routerMiddleware","createSagaMiddleware","configureStore","rootSaga","rootReducer","sagaMiddleware","history","store","reducer","devTools","process","env","NODE_ENV","middleware","getDefaultMiddleware","thunk","serializableCheck","concat","run"],"mappings":"AAAA,SAASA,oBAAT,QAAqC,SAArC;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,OAAOC,oBAAP,MAAiC,kBAAjC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,QAAP,MAAqB,SAArB,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,UAAxB;AAEA,MAAMC,cAAc,GAAGJ,oBAAoB,EAA3C;AACA,OAAO,MAAMK,OAAO,GAAGP,oBAAoB,EAApC,C,CAEP;;AACA,OAAO,MAAMQ,KAAK,GAAGL,cAAc,CAAC;AAClCM,EAAAA,OAAO,EAAEJ,WAAW,CAACE,OAAD,CADc;AAElCG,EAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAFD;AAGlCC,EAAAA,UAAU,EAAGC,oBAAD,IACVA,oBAAoB,CAAC;AACnBC,IAAAA,KAAK,EAAE,KADY;AAEnBC,IAAAA,iBAAiB,EAAE;AAFA,GAAD,CAApB,CAIGC,MAJH,CAIUZ,cAJV,EAKGY,MALH,CAKUjB,gBAAgB,CAACM,OAAD,CAL1B;AAJgC,CAAD,CAA5B,C,CAYP;;AACAD,cAAc,CAACa,GAAf,CAAmBf,QAAnB,E,CAEA","sourcesContent":["import { createBrowserHistory } from \"history\";\nimport { routerMiddleware } from \"connected-react-router\";\nimport createSagaMiddleware from \"@redux-saga/core\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport rootSaga from \"./sagas\";\n\n// Se obtienen todos los reducers\nimport rootReducer from \"reducers\";\n\nconst sagaMiddleware = createSagaMiddleware();\nexport const history = createBrowserHistory();\n\n// Crea el store de redux y configura autom치ticamente la extensi칩n Redux DevTools\nexport const store = configureStore({\n  reducer: rootReducer(history),\n  devTools: process.env.NODE_ENV !== \"production\",\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      thunk: false,\n      serializableCheck: false,\n    })\n      .concat(sagaMiddleware)\n      .concat(routerMiddleware(history)),\n});\n\n// Inicio el middleware de saga\nsagaMiddleware.run(rootSaga);\n\n// Infiero el `RootState` y `AppDispatch` directamente desde la store\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n"]},"metadata":{},"sourceType":"module"}