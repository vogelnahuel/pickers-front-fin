{"ast":null,"code":"import { call, takeLatest, put } from \"redux-saga/effects\";\nimport { actions } from \"reducers/dashboard\";\nimport * as dashboardMiddleware from \"middleware/dashboard\";\nconst sagas = [takeLatest(actions.getDashboardRequest.type, getDashboard)];\nexport default sagas;\n\nfunction* getDashboard() {\n  const response = yield call(dashboardMiddleware.getDashboard);\n\n  if (response.status !== 200) {\n    yield put(actions.getDashboardError());\n  } else {\n    const {\n      result\n    } = response.data;\n    yield put(actions.getDashboardSuccess(result));\n  }\n}","map":{"version":3,"sources":["/home/nahuel/pickers-admin-front/src/sagas/dashboard.ts"],"names":["call","takeLatest","put","actions","dashboardMiddleware","sagas","getDashboardRequest","type","getDashboard","response","status","getDashboardError","result","data","getDashboardSuccess"],"mappings":"AAAA,SACEA,IADF,EAEEC,UAFF,EAGEC,GAHF,QAOO,oBAPP;AAQA,SAASC,OAAT,QAAwB,oBAAxB;AACA,OAAO,KAAKC,mBAAZ,MAAqC,sBAArC;AAOA,MAAMC,KAAyB,GAAG,CAACJ,UAAU,CAACE,OAAO,CAACG,mBAAR,CAA4BC,IAA7B,EAAkCC,YAAlC,CAAX,CAAlC;AAEA,eAAeH,KAAf;;AAEA,UAAUG,YAAV,GAIE;AACA,QAAMC,QAAQ,GAAG,MAAMT,IAAI,CAACI,mBAAmB,CAACI,YAArB,CAA3B;;AACA,MAAIC,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,UAAMR,GAAG,CAACC,OAAO,CAACQ,iBAAR,EAAD,CAAT;AACD,GAFD,MAEO;AACL,UAAM;AAAEC,MAAAA;AAAF,QAAaH,QAAQ,CAACI,IAA5B;AACA,UAAMX,GAAG,CAACC,OAAO,CAACW,mBAAR,CAA4BF,MAA5B,CAAD,CAAT;AACD;AACF","sourcesContent":["import {\n  call,\n  takeLatest,\n  put,\n  CallEffect,\n  PutEffect,\n  ForkEffect,\n} from \"redux-saga/effects\";\nimport { actions } from \"reducers/dashboard\";\nimport * as dashboardMiddleware from \"middleware/dashboard\";\nimport {\n  dashboardResponseDataType,\n  dashboardResponseType,\n} from \"./types/dashboard\";\nimport { AxiosResponse } from \"axios\";\n\nconst sagas:ForkEffect<never>[] = [takeLatest(actions.getDashboardRequest.type,getDashboard)];\n\nexport default sagas;\n\nfunction* getDashboard(): Generator<\n  CallEffect<AxiosResponse<dashboardResponseDataType>> | PutEffect<{ type: string;}>,\n  void,\n  dashboardResponseType\n> {\n  const response = yield call(dashboardMiddleware.getDashboard);\n  if (response.status !== 200) {\n    yield put(actions.getDashboardError());\n  } else {\n    const { result } = response.data;\n    yield put(actions.getDashboardSuccess(result));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}