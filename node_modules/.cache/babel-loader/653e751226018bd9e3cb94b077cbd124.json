{"ast":null,"code":"var _jsxFileName = \"/home/nahuel/pickers-admin-front/src/pages/transaction/TransactionContainer.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { actions as transactionActions, transactionsSelector } from \"reducers/transactions\";\nimport { Transaction } from \"pages/transaction/Transaction\";\nimport { useLocation } from \"react-router-dom\";\nimport parseQueryParams from \"utils/parseQueryParams\";\nimport moment from \"moment\";\nimport { DATE_FORMATS } from \"utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TransactionContainer = props => {\n  _s();\n\n  const params = useLocation();\n  const [resolutionHeightModal, setresolutionHeightModal] = useState(550);\n  useEffect(() => {\n    if (window.innerWidth < 1300) {\n      setresolutionHeightModal(496);\n    }\n\n    if (window.innerWidth > 1900) {\n      setresolutionHeightModal(675);\n    }\n\n    props.reset();\n    const filters = parseQueryParams(params.search);\n    filters.inAlert = Boolean(filters.inAlert);\n    filters.maxMinDeliveryDate && (filters.date = {\n      from: moment(filters.minMinDeliveryDate, DATE_FORMATS.shortISODate).format(DATE_FORMATS.shortDate),\n      until: moment(filters.maxMinDeliveryDate, DATE_FORMATS.shortISODate).format(DATE_FORMATS.shortDate)\n    });\n    const filtersExtra = {\n      limit: window.innerHeight < 770 ? 3 : 4\n    };\n    props.setExtraFilters(filtersExtra);\n    props.getTransactions({ ...filtersExtra,\n      ...filters\n    });\n    props.setFilters(filters || {}); // eslint-disable-next-line\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Transaction, {\n    resolutionHeightModal: resolutionHeightModal,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TransactionContainer, \"TqUbAIjUltrUfac9Fvc95bwWjBw=\", false, function () {\n  return [useLocation];\n});\n\n_c = TransactionContainer;\n\nconst mapStateToProps = state => ({\n  transactions: transactionsSelector(state).transactions,\n  isFetching: transactionsSelector(state).fetching,\n  isExportDisabled: transactionsSelector(state).exportDisabled,\n  filters: transactionsSelector(state).filters,\n  filtersExtra: transactionsSelector(state).filtersExtra,\n  seeMore: transactionsSelector(state).seeMore,\n  filtersExtraSeeMore: transactionsSelector(state).filtersExtraSeeMore,\n  detailTransactionModalOpen: transactionsSelector(state).detailTransactionModalOpen\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getTransactionsExportRequest: (params, element) => {\n    element.blur();\n    dispatch(transactionActions.getTransactionsExportRequest(params));\n  },\n  getTransactions: params => {\n    dispatch(transactionActions.getTransactionsRequest(params));\n  },\n  reset: () => {\n    dispatch(transactionActions.reset());\n  },\n  setFilters: filters => {\n    dispatch(transactionActions.setTransactionFilters(filters));\n  },\n  setExtraFilters: extraFilters => {\n    dispatch(transactionActions.setTransactionExtraFilters(extraFilters));\n  },\n  getMoreTransactions: params => {\n    dispatch(transactionActions.getMoreTransactionsRequest(params));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransactionContainer);\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionContainer\");","map":{"version":3,"sources":["/home/nahuel/pickers-admin-front/src/pages/transaction/TransactionContainer.tsx"],"names":["React","useEffect","useState","connect","actions","transactionActions","transactionsSelector","Transaction","useLocation","parseQueryParams","moment","DATE_FORMATS","TransactionContainer","props","params","resolutionHeightModal","setresolutionHeightModal","window","innerWidth","reset","filters","search","inAlert","Boolean","maxMinDeliveryDate","date","from","minMinDeliveryDate","shortISODate","format","shortDate","until","filtersExtra","limit","innerHeight","setExtraFilters","getTransactions","setFilters","mapStateToProps","state","transactions","isFetching","fetching","isExportDisabled","exportDisabled","seeMore","filtersExtraSeeMore","detailTransactionModalOpen","mapDispatchToProps","dispatch","getTransactionsExportRequest","element","blur","getTransactionsRequest","setTransactionFilters","extraFilters","setTransactionExtraFilters","getMoreTransactions","getMoreTransactionsRequest"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  actions as transactionActions,\n  transactionsSelector,\n} from \"reducers/transactions\";\nimport { Transaction } from \"pages/transaction/Transaction\";\nimport { useLocation } from \"react-router-dom\";\nimport parseQueryParams from \"utils/parseQueryParams\";\nimport moment from \"moment\";\nimport { AppDispatch, RootState } from \"store\";\nimport {\n  TransactionContainerPropsType,\n  URLTransactionContainerType,\n} from \"./types\";\nimport { FilterTransactionsType } from \"sagas/types/transactions\";\nimport { SetFilterExtraType, SetFilterType } from \"reducers/types/transaction\";\nimport { DATE_FORMATS } from \"utils/constants\";\n\nconst TransactionContainer: React.FC<TransactionContainerPropsType> = (\n  props\n): JSX.Element => {\n  const params = useLocation();\n  const [resolutionHeightModal, setresolutionHeightModal] = useState(550);\n\n  useEffect(() => {\n    if (window.innerWidth < 1300) {\n      setresolutionHeightModal(496);\n    }\n    if (window.innerWidth > 1900) {\n      setresolutionHeightModal(675);\n    }\n    props.reset();\n\n    const filters: URLTransactionContainerType = parseQueryParams(\n      params.search\n    );\n    filters.inAlert = Boolean(filters.inAlert);\n\n    filters.maxMinDeliveryDate &&\n      (filters.date = {\n        from: moment(\n          filters.minMinDeliveryDate,\n          DATE_FORMATS.shortISODate\n        ).format(DATE_FORMATS.shortDate),\n        until: moment(\n          filters.maxMinDeliveryDate,\n          DATE_FORMATS.shortISODate\n        ).format(DATE_FORMATS.shortDate),\n      });\n    const filtersExtra = { limit: window.innerHeight < 770 ? 3 : 4 };\n    props.setExtraFilters(filtersExtra);\n    props.getTransactions({ ...filtersExtra, ...filters });\n    props.setFilters(filters || {});\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <Transaction resolutionHeightModal={resolutionHeightModal} {...props} />\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  transactions: transactionsSelector(state).transactions,\n  isFetching: transactionsSelector(state).fetching,\n  isExportDisabled: transactionsSelector(state).exportDisabled,\n  filters: transactionsSelector(state).filters,\n  filtersExtra: transactionsSelector(state).filtersExtra,\n  seeMore: transactionsSelector(state).seeMore,\n  filtersExtraSeeMore: transactionsSelector(state).filtersExtraSeeMore,\n  detailTransactionModalOpen:\n    transactionsSelector(state).detailTransactionModalOpen,\n});\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\n  getTransactionsExportRequest: (\n    params: FilterTransactionsType,\n    element: HTMLElement\n  ) => {\n    element.blur();\n    dispatch(transactionActions.getTransactionsExportRequest(params));\n  },\n  getTransactions: (params: FilterTransactionsType) => {\n    dispatch(transactionActions.getTransactionsRequest(params));\n  },\n  reset: () => {\n    dispatch(transactionActions.reset());\n  },\n  setFilters: (filters: SetFilterType) => {\n    dispatch(transactionActions.setTransactionFilters(filters));\n  },\n  setExtraFilters: (extraFilters: SetFilterExtraType) => {\n    dispatch(transactionActions.setTransactionExtraFilters(extraFilters));\n  },\n  getMoreTransactions: (params: FilterTransactionsType) => {\n    dispatch(transactionActions.getMoreTransactionsRequest(params));\n  },\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TransactionContainer);\n"]},"metadata":{},"sourceType":"module"}