{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { eventToSentryRequest, sessionToSentryRequest } from '@sentry/core';\nimport { Outcome } from '@sentry/types';\nimport { SentryError, supportsReferrerPolicy, SyncPromise } from '@sentry/utils';\nimport { BaseTransport } from './base';\nimport { getNativeFetchImplementation } from './utils';\n/** `fetch` based transport */\n\nvar FetchTransport =\n/** @class */\nfunction (_super) {\n  __extends(FetchTransport, _super);\n\n  function FetchTransport(options, fetchImpl) {\n    if (fetchImpl === void 0) {\n      fetchImpl = getNativeFetchImplementation();\n    }\n\n    var _this = _super.call(this, options) || this;\n\n    _this._fetch = fetchImpl;\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  FetchTransport.prototype.sendEvent = function (event) {\n    return this._sendRequest(eventToSentryRequest(event, this._api), event);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  FetchTransport.prototype.sendSession = function (session) {\n    return this._sendRequest(sessionToSentryRequest(session, this._api), session);\n  };\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n\n\n  FetchTransport.prototype._sendRequest = function (sentryRequest, originalPayload) {\n    var _this = this;\n\n    if (this._isRateLimited(sentryRequest.type)) {\n      this.recordLostEvent(Outcome.RateLimitBackoff, sentryRequest.type);\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        reason: \"Transport for \" + sentryRequest.type + \" requests locked till \" + this._disabledUntil(sentryRequest.type) + \" due to too many requests.\",\n        status: 429\n      });\n    }\n\n    var options = {\n      body: sentryRequest.body,\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n      // https://caniuse.com/#feat=referrer-policy\n      // It doesn't. And it throw exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: supportsReferrerPolicy() ? 'origin' : ''\n    };\n\n    if (this.options.fetchParameters !== undefined) {\n      Object.assign(options, this.options.fetchParameters);\n    }\n\n    if (this.options.headers !== undefined) {\n      options.headers = this.options.headers;\n    }\n\n    return this._buffer.add(function () {\n      return new SyncPromise(function (resolve, reject) {\n        void _this._fetch(sentryRequest.url, options).then(function (response) {\n          var headers = {\n            'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n            'retry-after': response.headers.get('Retry-After')\n          };\n\n          _this._handleResponse({\n            requestType: sentryRequest.type,\n            response: response,\n            headers: headers,\n            resolve: resolve,\n            reject: reject\n          });\n        }).catch(reject);\n      });\n    }).then(undefined, function (reason) {\n      // It's either buffer rejection or any other xhr/fetch error, which are treated as NetworkError.\n      if (reason instanceof SentryError) {\n        _this.recordLostEvent(Outcome.QueueOverflow, sentryRequest.type);\n      } else {\n        _this.recordLostEvent(Outcome.NetworkError, sentryRequest.type);\n      }\n\n      throw reason;\n    });\n  };\n\n  return FetchTransport;\n}(BaseTransport);\n\nexport { FetchTransport };","map":{"version":3,"sources":["../../src/transports/fetch.ts"],"names":[],"mappings":"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","sourcesContent":["import { eventToSentryRequest, sessionToSentryRequest } from '@sentry/core';\nimport { Event, Outcome, Response, SentryRequest, Session, TransportOptions } from '@sentry/types';\nimport { SentryError, supportsReferrerPolicy, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\nimport { FetchImpl, getNativeFetchImplementation } from './utils';\n\n/** `fetch` based transport */\nexport class FetchTransport extends BaseTransport {\n  /**\n   * Fetch API reference which always points to native browser implementation.\n   */\n  private _fetch: typeof fetch;\n\n  public constructor(options: TransportOptions, fetchImpl: FetchImpl = getNativeFetchImplementation()) {\n    super(options);\n    this._fetch = fetchImpl;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<Response> {\n    return this._sendRequest(eventToSentryRequest(event, this._api), event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session): PromiseLike<Response> {\n    return this._sendRequest(sessionToSentryRequest(session, this._api), session);\n  }\n\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n  private _sendRequest(sentryRequest: SentryRequest, originalPayload: Event | Session): PromiseLike<Response> {\n    if (this._isRateLimited(sentryRequest.type)) {\n      this.recordLostEvent(Outcome.RateLimitBackoff, sentryRequest.type);\n\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        reason: `Transport for ${sentryRequest.type} requests locked till ${this._disabledUntil(\n          sentryRequest.type,\n        )} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    const options: RequestInit = {\n      body: sentryRequest.body,\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n      // https://caniuse.com/#feat=referrer-policy\n      // It doesn't. And it throw exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: (supportsReferrerPolicy() ? 'origin' : '') as ReferrerPolicy,\n    };\n    if (this.options.fetchParameters !== undefined) {\n      Object.assign(options, this.options.fetchParameters);\n    }\n    if (this.options.headers !== undefined) {\n      options.headers = this.options.headers;\n    }\n\n    return this._buffer\n      .add(\n        () =>\n          new SyncPromise<Response>((resolve, reject) => {\n            void this._fetch(sentryRequest.url, options)\n              .then(response => {\n                const headers = {\n                  'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n                  'retry-after': response.headers.get('Retry-After'),\n                };\n                this._handleResponse({\n                  requestType: sentryRequest.type,\n                  response,\n                  headers,\n                  resolve,\n                  reject,\n                });\n              })\n              .catch(reject);\n          }),\n      )\n      .then(undefined, reason => {\n        // It's either buffer rejection or any other xhr/fetch error, which are treated as NetworkError.\n        if (reason instanceof SentryError) {\n          this.recordLostEvent(Outcome.QueueOverflow, sentryRequest.type);\n        } else {\n          this.recordLostEvent(Outcome.NetworkError, sentryRequest.type);\n        }\n        throw reason;\n      });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}