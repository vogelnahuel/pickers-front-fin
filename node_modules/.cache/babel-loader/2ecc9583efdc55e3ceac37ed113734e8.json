{"ast":null,"code":"import axios from \"axios\";\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  headers: {\n    \"country-code\": \"ar\",\n    \"Access-Control-Allow-Origin\": \"true\"\n  }\n});\nexport const setAuthToken = token => {\n  api.defaults.headers.Authorization = `bearer ${token}`;\n}; // api.interceptors.request.use((request) => {\n//   if (request.headers && !request.headers.Authorization) {\n//     let token = getValue(\"token\");\n//     request.headers.Authorization = `bearer ${token}`;\n//     setAuthToken(token);\n//   }\n//   return request;\n// });\n\napi.interceptors.response.use(response => {\n  if (response.status === 204) {\n    return response;\n  } // cubre el caso de un download de un archivo\n\n\n  if (response.status === 200 && response.request.responseType === \"blob\") {\n    return response;\n  }\n\n  return response;\n}, error => {\n  if (!error.status && !error.response) {\n    window.location.reload();\n  }\n\n  if (error.response) {\n    if (error.response.status !== 401) {\n      return error.response;\n    }\n  } // se agrega el atributo para saber que es un error de saga\n  // eslint-disable-next-line\n\n\n  error.httpError = true;\n  throw error;\n});\nexport const remove = (path, body) => {\n  return api.delete(path, {\n    params: body\n  });\n};\nexport const get = (path, query) => {\n  return api.get(path, {\n    params: query\n  });\n};\nexport const post = (path, body) => {\n  return api.post(path, body);\n};\nexport const put = (path, body, query) => {\n  return api.put(path, body, query);\n};\nexport const patch = (path, body, query) => {\n  return api.patch(path, body, query);\n};\nexport default api;","map":{"version":3,"sources":["/home/nahuel/pickers-admin-front/src/middleware/api.ts"],"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","setAuthToken","token","defaults","Authorization","interceptors","response","use","status","request","responseType","error","window","location","reload","httpError","remove","path","body","delete","params","get","query","post","put","patch"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAN,CAAa;AACvBC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,iBADE;AAEvBC,EAAAA,OAAO,EAAE;AACP,oBAAgB,IADT;AAEP,mCAA+B;AAFxB;AAFc,CAAb,CAAZ;AAQA,OAAO,MAAMC,YAAY,GAAIC,KAAD,IAAmB;AAC7CR,EAAAA,GAAG,CAACS,QAAJ,CAAaH,OAAb,CAAqBI,aAArB,GAAsC,UAASF,KAAM,EAArD;AACD,CAFM,C,CAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAR,GAAG,CAACW,YAAJ,CAAiBC,QAAjB,CAA0BC,GAA1B,CACGD,QAAD,IAAc;AACZ,MAAIA,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,WAAOF,QAAP;AACD,GAHW,CAKZ;;;AACA,MAAIA,QAAQ,CAACE,MAAT,KAAoB,GAApB,IAA2BF,QAAQ,CAACG,OAAT,CAAiBC,YAAjB,KAAkC,MAAjE,EAAyE;AACvE,WAAOJ,QAAP;AACD;;AACD,SAAOA,QAAP;AACD,CAXH,EAYGK,KAAD,IAAW;AACT,MAAI,CAACA,KAAK,CAACH,MAAP,IAAiB,CAACG,KAAK,CAACL,QAA5B,EAAsC;AACpCM,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD;;AACD,MAAIH,KAAK,CAACL,QAAV,EAAoB;AAClB,QAAIK,KAAK,CAACL,QAAN,CAAeE,MAAf,KAA0B,GAA9B,EAAmC;AACjC,aAAOG,KAAK,CAACL,QAAb;AACD;AACF,GARQ,CAST;AACA;;;AACAK,EAAAA,KAAK,CAACI,SAAN,GAAkB,IAAlB;AAEA,QAAMJ,KAAN;AACD,CA1BH;AAkCA,OAAO,MAAMK,MAAM,GAAG,CAACC,IAAD,EAAeC,IAAf,KAAiC;AACrD,SAAOxB,GAAG,CAACyB,MAAJ,CAAWF,IAAX,EAAiB;AAAEG,IAAAA,MAAM,EAAEF;AAAV,GAAjB,CAAP;AACD,CAFM;AAIP,OAAO,MAAMG,GAAG,GAAG,CAACJ,IAAD,EAAeK,KAAf,KAAkC;AACnD,SAAO5B,GAAG,CAAC2B,GAAJ,CAAQJ,IAAR,EAAc;AAAEG,IAAAA,MAAM,EAAEE;AAAV,GAAd,CAAP;AACD,CAFM;AAIP,OAAO,MAAMC,IAAI,GAAG,CAACN,IAAD,EAAeC,IAAf,KAAgC;AAClD,SAAOxB,GAAG,CAAC6B,IAAJ,CAASN,IAAT,EAAeC,IAAf,CAAP;AACD,CAFM;AAIP,OAAO,MAAMM,GAAG,GAAG,CAACP,IAAD,EAAeC,IAAf,EAA8BI,KAA9B,KAAiD;AAClE,SAAO5B,GAAG,CAAC8B,GAAJ,CAAQP,IAAR,EAAcC,IAAd,EAAoBI,KAApB,CAAP;AACD,CAFM;AAIP,OAAO,MAAMG,KAAK,GAAG,CAACR,IAAD,EAAeC,IAAf,EAA8BI,KAA9B,KAAiD;AACpE,SAAO5B,GAAG,CAAC+B,KAAJ,CAAUR,IAAV,EAAgBC,IAAhB,EAAsBI,KAAtB,CAAP;AACD,CAFM;AAGP,eAAe5B,GAAf","sourcesContent":["import axios from \"axios\";\nimport { getValue } from \"../utils/localStorage\";\n\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  headers: {\n    \"country-code\": \"ar\",\n    \"Access-Control-Allow-Origin\": \"true\",\n  },\n});\n\nexport const setAuthToken = (token: string) => {\n  api.defaults.headers.Authorization = `bearer ${token}`;\n};\n\n// api.interceptors.request.use((request) => {\n//   if (request.headers && !request.headers.Authorization) {\n//     let token = getValue(\"token\");\n//     request.headers.Authorization = `bearer ${token}`;\n//     setAuthToken(token);\n//   }\n//   return request;\n// });\n\napi.interceptors.response.use(\n  (response) => {\n    if (response.status === 204) {\n      return response;\n    }\n\n    // cubre el caso de un download de un archivo\n    if (response.status === 200 && response.request.responseType === \"blob\") {\n      return response;\n    }\n    return response;\n  },\n  (error) => {\n    if (!error.status && !error.response) {\n      window.location.reload();\n    }\n    if (error.response) {\n      if (error.response.status !== 401) {\n        return error.response;\n      }\n    }\n    // se agrega el atributo para saber que es un error de saga\n    // eslint-disable-next-line\n    error.httpError = true;\n\n    throw error;\n  }\n);\n\nexport type ApiResponse<T> = {\n  status: number;\n  data: T\n}\n\nexport const remove = (path: string, body?: object) => {\n  return api.delete(path, { params: body });\n};\n\nexport const get = (path: string, query?: object) => {\n  return api.get(path, { params: query });\n};\n\nexport const post = (path: string, body: object) => {\n  return api.post(path, body);\n};\n\nexport const put = (path: string, body?: object, query?: object) => {\n  return api.put(path, body, query);\n};\n\nexport const patch = (path: string, body?: object, query?: object) => {\n  return api.patch(path, body, query);\n};\nexport default api;\n"]},"metadata":{},"sourceType":"module"}