{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nimport { getMainCarrier } from '@sentry/hub';\nimport { TransactionSamplingMethod } from '@sentry/types';\nimport { dynamicRequire, isNodeEnv, loadModule, logger } from '@sentry/utils';\nimport { registerErrorInstrumentation } from './errors';\nimport { IdleTransaction } from './idletransaction';\nimport { Transaction } from './transaction';\nimport { hasTracingEnabled } from './utils';\n/** Returns all trace headers that are currently on the top scope. */\n\nfunction traceHeaders() {\n  var scope = this.getScope();\n\n  if (scope) {\n    var span = scope.getSpan();\n\n    if (span) {\n      return {\n        'sentry-trace': span.toTraceparent()\n      };\n    }\n  }\n\n  return {};\n}\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param hub: The hub off of which to read config options\n * @param transaction: The transaction needing a sampling decision\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\n\n\nfunction sample(transaction, options, samplingContext) {\n  // nothing to do if tracing is not enabled\n  if (!hasTracingEnabled(options)) {\n    transaction.sampled = false;\n    return transaction;\n  } // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n\n\n  if (transaction.sampled !== undefined) {\n    transaction.setMetadata({\n      transactionSampling: {\n        method: TransactionSamplingMethod.Explicit\n      }\n    });\n    return transaction;\n  } // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n\n\n  var sampleRate;\n\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    transaction.setMetadata({\n      transactionSampling: {\n        method: TransactionSamplingMethod.Sampler,\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate)\n      }\n    });\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n    transaction.setMetadata({\n      transactionSampling: {\n        method: TransactionSamplingMethod.Inheritance\n      }\n    });\n  } else {\n    sampleRate = options.tracesSampleRate;\n    transaction.setMetadata({\n      transactionSampling: {\n        method: TransactionSamplingMethod.Rate,\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate)\n      }\n    });\n  } // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n\n\n  if (!isValidSampleRate(sampleRate)) {\n    logger.warn(\"[Tracing] Discarding transaction because of invalid sample rate.\");\n    transaction.sampled = false;\n    return transaction;\n  } // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n\n\n  if (!sampleRate) {\n    logger.log(\"[Tracing] Discarding transaction because \" + (typeof options.tracesSampler === 'function' ? 'tracesSampler returned 0 or false' : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'));\n    transaction.sampled = false;\n    return transaction;\n  } // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n\n\n  transaction.sampled = Math.random() < sampleRate; // if we're not going to keep it, we're done\n\n  if (!transaction.sampled) {\n    logger.log(\"[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = \" + Number(sampleRate) + \")\");\n    return transaction;\n  }\n\n  logger.log(\"[Tracing] starting \" + transaction.op + \" transaction - \" + transaction.name);\n  return transaction;\n}\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\n\n\nfunction isValidSampleRate(rate) {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    logger.warn(\"[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got \" + JSON.stringify(rate) + \" of type \" + JSON.stringify(typeof rate) + \".\");\n    return false;\n  } // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n\n\n  if (rate < 0 || rate > 1) {\n    logger.warn(\"[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got \" + rate + \".\");\n    return false;\n  }\n\n  return true;\n}\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\n\n\nfunction _startTransaction(transactionContext, customSamplingContext) {\n  var _a, _b;\n\n  var options = ((_a = this.getClient()) === null || _a === void 0 ? void 0 : _a.getOptions()) || {};\n  var transaction = new Transaction(transactionContext, this);\n  transaction = sample(transaction, options, __assign({\n    parentSampled: transactionContext.parentSampled,\n    transactionContext: transactionContext\n  }, customSamplingContext));\n\n  if (transaction.sampled) {\n    transaction.initSpanRecorder((_b = options._experiments) === null || _b === void 0 ? void 0 : _b.maxSpans);\n  }\n\n  return transaction;\n}\n/**\n * Create new idle transaction.\n */\n\n\nexport function startIdleTransaction(hub, transactionContext, idleTimeout, onScope, customSamplingContext) {\n  var _a, _b;\n\n  var options = ((_a = hub.getClient()) === null || _a === void 0 ? void 0 : _a.getOptions()) || {};\n  var transaction = new IdleTransaction(transactionContext, hub, idleTimeout, onScope);\n  transaction = sample(transaction, options, __assign({\n    parentSampled: transactionContext.parentSampled,\n    transactionContext: transactionContext\n  }, customSamplingContext));\n\n  if (transaction.sampled) {\n    transaction.initSpanRecorder((_b = options._experiments) === null || _b === void 0 ? void 0 : _b.maxSpans);\n  }\n\n  return transaction;\n}\n/**\n * @private\n */\n\nexport function _addTracingExtensions() {\n  var carrier = getMainCarrier();\n\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n\n  if (!carrier.__SENTRY__.extensions.startTransaction) {\n    carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n  }\n\n  if (!carrier.__SENTRY__.extensions.traceHeaders) {\n    carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n  }\n}\n/**\n * @private\n */\n\nfunction _autoloadDatabaseIntegrations() {\n  var carrier = getMainCarrier();\n\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n\n  var packageToIntegrationMapping = {\n    mongodb: function () {\n      var integration = dynamicRequire(module, './integrations/node/mongo');\n      return new integration.Mongo();\n    },\n    mongoose: function () {\n      var integration = dynamicRequire(module, './integrations/node/mongo');\n      return new integration.Mongo({\n        mongoose: true\n      });\n    },\n    mysql: function () {\n      var integration = dynamicRequire(module, './integrations/node/mysql');\n      return new integration.Mysql();\n    },\n    pg: function () {\n      var integration = dynamicRequire(module, './integrations/node/postgres');\n      return new integration.Postgres();\n    }\n  };\n  var mappedPackages = Object.keys(packageToIntegrationMapping).filter(function (moduleName) {\n    return !!loadModule(moduleName);\n  }).map(function (pkg) {\n    try {\n      return packageToIntegrationMapping[pkg]();\n    } catch (e) {\n      return undefined;\n    }\n  }).filter(function (p) {\n    return p;\n  });\n\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = __spread(carrier.__SENTRY__.integrations || [], mappedPackages);\n  }\n}\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\n\n\nexport function addExtensionMethods() {\n  _addTracingExtensions(); // Detect and automatically load specified integrations.\n\n\n  if (isNodeEnv()) {\n    _autoloadDatabaseIntegrations();\n  } // If an error happens globally, we should make sure transaction status is set to error.\n\n\n  registerErrorInstrumentation();\n}","map":{"version":3,"sources":["../src/hubextensions.ts"],"names":[],"mappings":"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","sourcesContent":["import { getMainCarrier, Hub } from '@sentry/hub';\nimport {\n  CustomSamplingContext,\n  Integration,\n  IntegrationClass,\n  Options,\n  SamplingContext,\n  TransactionContext,\n  TransactionSamplingMethod,\n} from '@sentry/types';\nimport { dynamicRequire, isNodeEnv, loadModule, logger } from '@sentry/utils';\n\nimport { registerErrorInstrumentation } from './errors';\nimport { IdleTransaction } from './idletransaction';\nimport { Transaction } from './transaction';\nimport { hasTracingEnabled } from './utils';\n\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders(this: Hub): { [key: string]: string } {\n  const scope = this.getScope();\n  if (scope) {\n    const span = scope.getSpan();\n    if (span) {\n      return {\n        'sentry-trace': span.toTraceparent(),\n      };\n    }\n  }\n  return {};\n}\n\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param hub: The hub off of which to read config options\n * @param transaction: The transaction needing a sampling decision\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\nfunction sample<T extends Transaction>(transaction: T, options: Options, samplingContext: SamplingContext): T {\n  // nothing to do if tracing is not enabled\n  if (!hasTracingEnabled(options)) {\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n  if (transaction.sampled !== undefined) {\n    transaction.setMetadata({\n      transactionSampling: { method: TransactionSamplingMethod.Explicit },\n    });\n    return transaction;\n  }\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    transaction.setMetadata({\n      transactionSampling: {\n        method: TransactionSamplingMethod.Sampler,\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate),\n      },\n    });\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n    transaction.setMetadata({\n      transactionSampling: { method: TransactionSamplingMethod.Inheritance },\n    });\n  } else {\n    sampleRate = options.tracesSampleRate;\n    transaction.setMetadata({\n      transactionSampling: {\n        method: TransactionSamplingMethod.Rate,\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate),\n      },\n    });\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(sampleRate)) {\n    logger.warn(`[Tracing] Discarding transaction because of invalid sample rate.`);\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!sampleRate) {\n    logger.log(\n      `[Tracing] Discarding transaction because ${\n        typeof options.tracesSampler === 'function'\n          ? 'tracesSampler returned 0 or false'\n          : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'\n      }`,\n    );\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  transaction.sampled = Math.random() < (sampleRate as number | boolean);\n\n  // if we're not going to keep it, we're done\n  if (!transaction.sampled) {\n    logger.log(\n      `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n        sampleRate,\n      )})`,\n    );\n    return transaction;\n  }\n\n  logger.log(`[Tracing] starting ${transaction.op} transaction - ${transaction.name}`);\n  return transaction;\n}\n\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nfunction isValidSampleRate(rate: unknown): boolean {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate as any) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    logger.warn(\n      `[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n        rate,\n      )} of type ${JSON.stringify(typeof rate)}.`,\n    );\n    return false;\n  }\n\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${rate}.`);\n    return false;\n  }\n  return true;\n}\n\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(\n  this: Hub,\n  transactionContext: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  const options = this.getClient()?.getOptions() || {};\n\n  let transaction = new Transaction(transactionContext, this);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments?.maxSpans as number);\n  }\n  return transaction;\n}\n\n/**\n * Create new idle transaction.\n */\nexport function startIdleTransaction(\n  hub: Hub,\n  transactionContext: TransactionContext,\n  idleTimeout?: number,\n  onScope?: boolean,\n  customSamplingContext?: CustomSamplingContext,\n): IdleTransaction {\n  const options = hub.getClient()?.getOptions() || {};\n\n  let transaction = new IdleTransaction(transactionContext, hub, idleTimeout, onScope);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments?.maxSpans as number);\n  }\n  return transaction;\n}\n\n/**\n * @private\n */\nexport function _addTracingExtensions(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n  if (!carrier.__SENTRY__.extensions.startTransaction) {\n    carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n  }\n  if (!carrier.__SENTRY__.extensions.traceHeaders) {\n    carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n  }\n}\n\n/**\n * @private\n */\nfunction _autoloadDatabaseIntegrations(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n\n  const packageToIntegrationMapping: Record<string, () => Integration> = {\n    mongodb() {\n      const integration = dynamicRequire(module, './integrations/node/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo();\n    },\n    mongoose() {\n      const integration = dynamicRequire(module, './integrations/node/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo({ mongoose: true });\n    },\n    mysql() {\n      const integration = dynamicRequire(module, './integrations/node/mysql') as {\n        Mysql: IntegrationClass<Integration>;\n      };\n      return new integration.Mysql();\n    },\n    pg() {\n      const integration = dynamicRequire(module, './integrations/node/postgres') as {\n        Postgres: IntegrationClass<Integration>;\n      };\n      return new integration.Postgres();\n    },\n  };\n\n  const mappedPackages = Object.keys(packageToIntegrationMapping)\n    .filter(moduleName => !!loadModule(moduleName))\n    .map(pkg => {\n      try {\n        return packageToIntegrationMapping[pkg]();\n      } catch (e) {\n        return undefined;\n      }\n    })\n    .filter(p => p) as Integration[];\n\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = [...(carrier.__SENTRY__.integrations || []), ...mappedPackages];\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nexport function addExtensionMethods(): void {\n  _addTracingExtensions();\n\n  // Detect and automatically load specified integrations.\n  if (isNodeEnv()) {\n    _autoloadDatabaseIntegrations();\n  }\n\n  // If an error happens globally, we should make sure transaction status is set to error.\n  registerErrorInstrumentation();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}