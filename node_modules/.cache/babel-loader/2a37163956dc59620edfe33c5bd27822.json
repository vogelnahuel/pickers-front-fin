{"ast":null,"code":"export let LoadingButtonState;\n\n(function (LoadingButtonState) {\n  LoadingButtonState[LoadingButtonState[\"Idle\"] = 0] = \"Idle\";\n  LoadingButtonState[LoadingButtonState[\"Loading\"] = 1] = \"Loading\";\n  LoadingButtonState[LoadingButtonState[\"Success\"] = 2] = \"Success\";\n  LoadingButtonState[LoadingButtonState[\"Error\"] = 3] = \"Error\";\n})(LoadingButtonState || (LoadingButtonState = {}));","map":{"version":3,"sources":["/home/nahuel/pickers-admin-front/src/component/loadingButton/types.ts"],"names":["LoadingButtonState"],"mappings":"AAAA,WAAYA,kBAAZ;;WAAYA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;GAAAA,kB,KAAAA,kB","sourcesContent":["export enum LoadingButtonState {\n  Idle = 0,\n  Loading,\n  Success,\n  Error\n}\n\nexport type LoadingButtonProps = {\n  children: string | JSX.Element | JSX.Element[];\n  onClick?: React.MouseEventHandler<HTMLButtonElement>;\n  disabled?: boolean;\n  status?: LoadingButtonState;\n  type: \"reset\" | \"button\" | \"submit\" | undefined;\n}"]},"metadata":{},"sourceType":"module"}