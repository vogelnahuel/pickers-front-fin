{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { endsWithAny } from \"utils/endsWithAny\";\nexport const initialState = {\n  fetching: false,\n  dashboard: {}\n};\nconst SLICE_NAME = \"dashboard\";\n\nconst isRequestAction = action => {\n  const {\n    type\n  } = action;\n  return type.startsWith(SLICE_NAME) && type.endsWith(\"Request\");\n};\n\nconst isResponseAction = action => {\n  const {\n    type\n  } = action;\n  return type.startsWith(SLICE_NAME) && endsWithAny(type, [\"Error\", \"Success\"]);\n};\n\nexport const dashboardSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    getDashboardRequest: () => {},\n    getDashboardSuccess: (state, action) => {\n      const {\n        payload\n      } = action;\n      state.dashboard = payload;\n    },\n    getDashboardError: () => {}\n  },\n  extraReducers: builder => builder.addMatcher(isRequestAction, state => {\n    state.fetching = true;\n  }).addMatcher(isResponseAction, state => {\n    state.fetching = false;\n  })\n});\nexport const dashboardSelector = state => state.dashboard;\nexport const actions = dashboardSlice.actions;\nexport default dashboardSlice.reducer;","map":{"version":3,"sources":["/home/nahuel/pickers-admin-front/src/reducers/dashboard.ts"],"names":["createSlice","endsWithAny","initialState","fetching","dashboard","SLICE_NAME","isRequestAction","action","type","startsWith","endsWith","isResponseAction","dashboardSlice","name","reducers","getDashboardRequest","getDashboardSuccess","state","payload","getDashboardError","extraReducers","builder","addMatcher","dashboardSelector","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAAmD,kBAAnD;AAGA,SAASC,WAAT,QAA4B,mBAA5B;AAGA,OAAO,MAAMC,YAA4B,GAAG;AAC1CC,EAAAA,QAAQ,EAAE,KADgC;AAE1CC,EAAAA,SAAS,EAAE;AAF+B,CAArC;AAKP,MAAMC,UAAU,GAAG,WAAnB;;AAEA,MAAMC,eAAe,GAAIC,MAAD,IAA4B;AAClD,QAAM;AAAEC,IAAAA;AAAF,MAAWD,MAAjB;AACA,SAAOC,IAAI,CAACC,UAAL,CAAgBJ,UAAhB,KAA+BG,IAAI,CAACE,QAAL,CAAc,SAAd,CAAtC;AACD,CAHD;;AAKA,MAAMC,gBAAgB,GAAIJ,MAAD,IAA4B;AACnD,QAAM;AAAEC,IAAAA;AAAF,MAAWD,MAAjB;AACA,SAAOC,IAAI,CAACC,UAAL,CAAgBJ,UAAhB,KAA+BJ,WAAW,CAACO,IAAD,EAAO,CAAC,OAAD,EAAU,SAAV,CAAP,CAAjD;AACD,CAHD;;AAKA,OAAO,MAAMI,cAAc,GAAGZ,WAAW,CAAC;AACxCa,EAAAA,IAAI,EAAER,UADkC;AAExCH,EAAAA,YAFwC;AAGxCY,EAAAA,QAAQ,EAAE;AACRC,IAAAA,mBAAmB,EAAE,MAAM,CAAE,CADrB;AAERC,IAAAA,mBAAmB,EAAE,CACnBC,KADmB,EAEnBV,MAFmB,KAGhB;AACH,YAAM;AAAEW,QAAAA;AAAF,UAAcX,MAApB;AACAU,MAAAA,KAAK,CAACb,SAAN,GAAkBc,OAAlB;AACD,KARO;AASRC,IAAAA,iBAAiB,EAAE,MAAM,CAAE;AATnB,GAH8B;AAcxCC,EAAAA,aAAa,EAAGC,OAAD,IACbA,OAAO,CACJC,UADH,CACchB,eADd,EACgCW,KAAD,IAA2B;AACtDA,IAAAA,KAAK,CAACd,QAAN,GAAiB,IAAjB;AACD,GAHH,EAIGmB,UAJH,CAIcX,gBAJd,EAIiCM,KAAD,IAA2B;AACvDA,IAAAA,KAAK,CAACd,QAAN,GAAiB,KAAjB;AACD,GANH;AAfsC,CAAD,CAAlC;AAwBP,OAAO,MAAMoB,iBAAiB,GAAIN,KAAD,IAAsBA,KAAK,CAACb,SAAtD;AAEP,OAAO,MAAMoB,OAAO,GAAGZ,cAAc,CAACY,OAA/B;AAEP,eAAeZ,cAAc,CAACa,OAA9B","sourcesContent":["import { createSlice, PayloadAction, Action } from \"@reduxjs/toolkit\";\nimport { DashboardType } from \"sagas/types/dashboard\";\nimport { RootState } from \"store\";\nimport { endsWithAny } from \"utils/endsWithAny\";\nimport { DashboardState } from \"./types/dashboard\";\n\nexport const initialState: DashboardState = {\n  fetching: false,\n  dashboard: {},\n};\n\nconst SLICE_NAME = \"dashboard\";\n\nconst isRequestAction = (action: Action<string>) => {\n  const { type } = action;\n  return type.startsWith(SLICE_NAME) && type.endsWith(\"Request\");\n};\n\nconst isResponseAction = (action: Action<string>) => {\n  const { type } = action;\n  return type.startsWith(SLICE_NAME) && endsWithAny(type, [\"Error\", \"Success\"]);\n};\n\nexport const dashboardSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    getDashboardRequest: () => {},\n    getDashboardSuccess: (\n      state: DashboardState,\n      action: PayloadAction<DashboardType>\n    ) => {\n      const { payload } = action;\n      state.dashboard = payload;\n    },\n    getDashboardError: () => {},\n  },\n  extraReducers: (builder) =>\n    builder\n      .addMatcher(isRequestAction, (state: DashboardState) => {\n        state.fetching = true;\n      })\n      .addMatcher(isResponseAction, (state: DashboardState) => {\n        state.fetching = false;\n      }),\n});\n\nexport const dashboardSelector = (state: RootState) => state.dashboard;\n\nexport const actions = dashboardSlice.actions;\n\nexport default dashboardSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}