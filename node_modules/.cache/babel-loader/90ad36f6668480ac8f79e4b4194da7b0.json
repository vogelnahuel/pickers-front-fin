{"ast":null,"code":"/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\n\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nexport function isNodeEnv() {\n  return Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n}\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\n\nexport function dynamicRequire(mod, request) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return mod.require(request);\n}\n/**\n * Helper for dynamically loading module that should work with linked dependencies.\n * The problem is that we _should_ be using `require(require.resolve(moduleName, { paths: [cwd()] }))`\n * However it's _not possible_ to do that with Webpack, as it has to know all the dependencies during\n * build time. `require.resolve` is also not available in any other way, so we cannot create,\n * a fake helper like we do with `dynamicRequire`.\n *\n * We always prefer to use local package, thus the value is not returned early from each `try/catch` block.\n * That is to mimic the behavior of `require.resolve` exactly.\n *\n * @param moduleName module name to require\n * @returns possibly required module\n */\n\nexport function loadModule(moduleName) {\n  var mod;\n\n  try {\n    mod = dynamicRequire(module, moduleName);\n  } catch (e) {// no-empty\n  }\n\n  try {\n    var cwd = dynamicRequire(module, 'process').cwd;\n    mod = dynamicRequire(module, cwd() + \"/node_modules/\" + moduleName);\n  } catch (e) {// no-empty\n  }\n\n  return mod;\n}","map":{"version":3,"sources":["../src/node.ts"],"names":[],"mappings":"AAAA;;;AAGG;;AAEH;;;;AAIG;AACH,OAAM,SAAU,SAAV,GAAmB;AACvB,SAAO,MAAM,CAAC,SAAP,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,OAAO,OAAP,KAAmB,WAAnB,GAAiC,OAAjC,GAA2C,CAA1E,MAAiF,kBAAxF;AACD;AAED;;;;AAIG;AACH;;AACA,OAAM,SAAU,cAAV,CAAyB,GAAzB,EAAmC,OAAnC,EAAkD;AACtD;AACA,SAAO,GAAG,CAAC,OAAJ,CAAY,OAAZ,CAAP;AACD;AAED;;;;;;;;;;;;AAYG;;AACH,OAAM,SAAU,UAAV,CAAwB,UAAxB,EAA0C;AAC9C,MAAI,GAAJ;;AAEA,MAAI;AACF,IAAA,GAAG,GAAG,cAAc,CAAC,MAAD,EAAS,UAAT,CAApB;AACD,GAFD,CAEE,OAAO,CAAP,EAAU,CACV;AACD;;AAED,MAAI;AACM,QAAA,GAAA,GAAA,cAAA,CAAA,MAAA,EAAA,SAAA,CAAA,CAAA,GAAA;AACR,IAAA,GAAG,GAAG,cAAc,CAAC,MAAD,EAAY,GAAG,KAAE,gBAAL,GAAsB,UAAlC,CAApB;AACD,GAHD,CAGE,OAAO,CAAP,EAAU,CACV;AACD;;AAED,SAAO,GAAP;AACD","sourcesContent":["/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\n\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nexport function isNodeEnv(): boolean {\n  return Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n}\n\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nexport function dynamicRequire(mod: any, request: string): any {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return mod.require(request);\n}\n\n/**\n * Helper for dynamically loading module that should work with linked dependencies.\n * The problem is that we _should_ be using `require(require.resolve(moduleName, { paths: [cwd()] }))`\n * However it's _not possible_ to do that with Webpack, as it has to know all the dependencies during\n * build time. `require.resolve` is also not available in any other way, so we cannot create,\n * a fake helper like we do with `dynamicRequire`.\n *\n * We always prefer to use local package, thus the value is not returned early from each `try/catch` block.\n * That is to mimic the behavior of `require.resolve` exactly.\n *\n * @param moduleName module name to require\n * @returns possibly required module\n */\nexport function loadModule<T>(moduleName: string): T | undefined {\n  let mod: T | undefined;\n\n  try {\n    mod = dynamicRequire(module, moduleName);\n  } catch (e) {\n    // no-empty\n  }\n\n  try {\n    const { cwd } = dynamicRequire(module, 'process');\n    mod = dynamicRequire(module, `${cwd()}/node_modules/${moduleName}`) as T;\n  } catch (e) {\n    // no-empty\n  }\n\n  return mod;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}