{"ast":null,"code":"/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { bindReporter } from './lib/bindReporter';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nexport var getCLS = function (onReport, reportAllChanges) {\n  var metric = initMetric('CLS', 0);\n  var report;\n  var sessionValue = 0;\n  var sessionEntries = [];\n\n  var entryHandler = function (entry) {\n    // Only count layout shifts without recent user input.\n    // TODO: Figure out why entry can be undefined\n    if (entry && !entry.hadRecentInput) {\n      var firstSessionEntry = sessionEntries[0];\n      var lastSessionEntry = sessionEntries[sessionEntries.length - 1]; // If the entry occurred less than 1 second after the previous entry and\n      // less than 5 seconds after the first entry in the session, include the\n      // entry in the current session. Otherwise, start a new session.\n\n      if (sessionValue && sessionEntries.length !== 0 && entry.startTime - lastSessionEntry.startTime < 1000 && entry.startTime - firstSessionEntry.startTime < 5000) {\n        sessionValue += entry.value;\n        sessionEntries.push(entry);\n      } else {\n        sessionValue = entry.value;\n        sessionEntries = [entry];\n      } // If the current session value is larger than the current CLS value,\n      // update CLS and the entries contributing to it.\n\n\n      if (sessionValue > metric.value) {\n        metric.value = sessionValue;\n        metric.entries = sessionEntries;\n\n        if (report) {\n          report();\n        }\n      }\n    }\n  };\n\n  var po = observe('layout-shift', entryHandler);\n\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n    onHidden(function () {\n      po.takeRecords().map(entryHandler);\n      report(true);\n    });\n  }\n};","map":{"version":3,"sources":["../../../src/browser/web-vitals/getCLS.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,YAAT,QAA6B,oBAA7B;AACA,SAAS,UAAT,QAA2B,kBAA3B;AACA,SAAS,OAAT,QAAiD,eAAjD;AACA,SAAS,QAAT,QAAyB,gBAAzB;AAiBA,OAAO,IAAM,MAAM,GAAG,UAAC,QAAD,EAA0B,gBAA1B,EAAoD;AACxE,MAAM,MAAM,GAAG,UAAU,CAAC,KAAD,EAAQ,CAAR,CAAzB;AACA,MAAI,MAAJ;AAEA,MAAI,YAAY,GAAG,CAAnB;AACA,MAAI,cAAc,GAAuB,EAAzC;;AAEA,MAAM,YAAY,GAAG,UAAC,KAAD,EAAmB;AACtC;AACA;AACA,QAAI,KAAK,IAAI,CAAC,KAAK,CAAC,cAApB,EAAoC;AAClC,UAAM,iBAAiB,GAAG,cAAc,CAAC,CAAD,CAAxC;AACA,UAAM,gBAAgB,GAAG,cAAc,CAAC,cAAc,CAAC,MAAf,GAAwB,CAAzB,CAAvC,CAFkC,CAIlC;AACA;AACA;;AACA,UACE,YAAY,IACZ,cAAc,CAAC,MAAf,KAA0B,CAD1B,IAEA,KAAK,CAAC,SAAN,GAAkB,gBAAgB,CAAC,SAAnC,GAA+C,IAF/C,IAGA,KAAK,CAAC,SAAN,GAAkB,iBAAiB,CAAC,SAApC,GAAgD,IAJlD,EAKE;AACA,QAAA,YAAY,IAAI,KAAK,CAAC,KAAtB;AACA,QAAA,cAAc,CAAC,IAAf,CAAoB,KAApB;AACD,OARD,MAQO;AACL,QAAA,YAAY,GAAG,KAAK,CAAC,KAArB;AACA,QAAA,cAAc,GAAG,CAAC,KAAD,CAAjB;AACD,OAlBiC,CAoBlC;AACA;;;AACA,UAAI,YAAY,GAAG,MAAM,CAAC,KAA1B,EAAiC;AAC/B,QAAA,MAAM,CAAC,KAAP,GAAe,YAAf;AACA,QAAA,MAAM,CAAC,OAAP,GAAiB,cAAjB;;AACA,YAAI,MAAJ,EAAY;AACV,UAAA,MAAM;AACP;AACF;AACF;AACF,GAjCD;;AAmCA,MAAM,EAAE,GAAG,OAAO,CAAC,cAAD,EAAiB,YAAjB,CAAlB;;AACA,MAAI,EAAJ,EAAQ;AACN,IAAA,MAAM,GAAG,YAAY,CAAC,QAAD,EAAW,MAAX,EAAmB,gBAAnB,CAArB;AAEA,IAAA,QAAQ,CAAC,YAAA;AACP,MAAA,EAAE,CAAC,WAAH,GAAiB,GAAjB,CAAqB,YAArB;AACA,MAAA,MAAM,CAAC,IAAD,CAAN;AACD,KAHO,CAAR;AAID;AACF,CAnDM","sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { ReportHandler } from './types';\n\n// https://wicg.github.io/layout-instability/#sec-layout-shift\nexport interface LayoutShift extends PerformanceEntry {\n  value: number;\n  hadRecentInput: boolean;\n  sources: Array<LayoutShiftAttribution>;\n  toJSON(): Record<string, unknown>;\n}\n\nexport interface LayoutShiftAttribution {\n  node?: Node;\n  previousRect: DOMRectReadOnly;\n  currentRect: DOMRectReadOnly;\n}\n\nexport const getCLS = (onReport: ReportHandler, reportAllChanges?: boolean): void => {\n  const metric = initMetric('CLS', 0);\n  let report: ReturnType<typeof bindReporter>;\n\n  let sessionValue = 0;\n  let sessionEntries: PerformanceEntry[] = [];\n\n  const entryHandler = (entry: LayoutShift): void => {\n    // Only count layout shifts without recent user input.\n    // TODO: Figure out why entry can be undefined\n    if (entry && !entry.hadRecentInput) {\n      const firstSessionEntry = sessionEntries[0];\n      const lastSessionEntry = sessionEntries[sessionEntries.length - 1];\n\n      // If the entry occurred less than 1 second after the previous entry and\n      // less than 5 seconds after the first entry in the session, include the\n      // entry in the current session. Otherwise, start a new session.\n      if (\n        sessionValue &&\n        sessionEntries.length !== 0 &&\n        entry.startTime - lastSessionEntry.startTime < 1000 &&\n        entry.startTime - firstSessionEntry.startTime < 5000\n      ) {\n        sessionValue += entry.value;\n        sessionEntries.push(entry);\n      } else {\n        sessionValue = entry.value;\n        sessionEntries = [entry];\n      }\n\n      // If the current session value is larger than the current CLS value,\n      // update CLS and the entries contributing to it.\n      if (sessionValue > metric.value) {\n        metric.value = sessionValue;\n        metric.entries = sessionEntries;\n        if (report) {\n          report();\n        }\n      }\n    }\n  };\n\n  const po = observe('layout-shift', entryHandler as PerformanceEntryHandler);\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n\n    onHidden(() => {\n      po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n      report(true);\n    });\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}