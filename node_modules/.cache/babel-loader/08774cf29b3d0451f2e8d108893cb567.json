{"ast":null,"code":"import { getGlobalObject } from './global';\nimport { isString } from './is';\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\n\nexport function htmlTreeAsString(elem, keyAttrs) {\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    var currentElem = elem;\n    var MAX_TRAVERSE_HEIGHT = 5;\n    var MAX_OUTPUT_LEN = 80;\n    var out = [];\n    var height = 0;\n    var len = 0;\n    var separator = ' > ';\n    var sepLength = separator.length;\n    var nextStr = void 0; // eslint-disable-next-line no-plusplus\n\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs); // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n      //   (ignore this limit if we are on the first iteration)\n\n      if (nextStr === 'html' || height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN) {\n        break;\n      }\n\n      out.push(nextStr);\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\n\nfunction _htmlElementAsString(el, keyAttrs) {\n  var _a, _b;\n\n  var elem = el;\n  var out = [];\n  var className;\n  var classes;\n  var key;\n  var attr;\n  var i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase()); // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n\n  var keyAttrPairs = ((_a = keyAttrs) === null || _a === void 0 ? void 0 : _a.length) ? keyAttrs.filter(function (keyAttr) {\n    return elem.getAttribute(keyAttr);\n  }).map(function (keyAttr) {\n    return [keyAttr, elem.getAttribute(keyAttr)];\n  }) : null;\n\n  if ((_b = keyAttrPairs) === null || _b === void 0 ? void 0 : _b.length) {\n    keyAttrPairs.forEach(function (keyAttrPair) {\n      out.push(\"[\" + keyAttrPair[0] + \"=\\\"\" + keyAttrPair[1] + \"\\\"]\");\n    });\n  } else {\n    if (elem.id) {\n      out.push(\"#\" + elem.id);\n    } // eslint-disable-next-line prefer-const\n\n\n    className = elem.className;\n\n    if (className && isString(className)) {\n      classes = className.split(/\\s+/);\n\n      for (i = 0; i < classes.length; i++) {\n        out.push(\".\" + classes[i]);\n      }\n    }\n  }\n\n  var allowedAttrs = ['type', 'name', 'title', 'alt'];\n\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n\n    if (attr) {\n      out.push(\"[\" + key + \"=\\\"\" + attr + \"\\\"]\");\n    }\n  }\n\n  return out.join('');\n}\n/**\n * A safe form of location.href\n */\n\n\nexport function getLocationHref() {\n  var global = getGlobalObject();\n\n  try {\n    return global.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}","map":{"version":3,"sources":["../src/browser.ts"],"names":[],"mappings":"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","sourcesContent":["import { getGlobalObject } from './global';\nimport { isString } from './is';\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(elem: unknown, keyAttrs?: string[]): string {\n  type SimpleNode = {\n    parentNode: SimpleNode;\n  } | null;\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const MAX_OUTPUT_LEN = 80;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n\n    // eslint-disable-next-line no-plusplus\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown, keyAttrs?: string[]): string {\n  const elem = el as {\n    tagName?: string;\n    id?: string;\n    className?: string;\n    getAttribute(key: string): string;\n  };\n\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs = keyAttrs?.length\n    ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)])\n    : null;\n\n  if (keyAttrPairs?.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n\n    // eslint-disable-next-line prefer-const\n    className = elem.className;\n    if (className && isString(className)) {\n      classes = className.split(/\\s+/);\n      for (i = 0; i < classes.length; i++) {\n        out.push(`.${classes[i]}`);\n      }\n    }\n  }\n  const allowedAttrs = ['type', 'name', 'title', 'alt'];\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  const global = getGlobalObject<Window>();\n  try {\n    return global.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}