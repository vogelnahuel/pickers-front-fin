{"ast":null,"code":"import { __assign, __read, __spread, __values } from \"tslib\";\n/* eslint-disable max-lines */\n\nimport { Scope } from '@sentry/hub';\nimport { Outcome, SessionStatus } from '@sentry/types';\nimport { checkOrSetAlreadyCaught, dateTimestampInSeconds, Dsn, isPlainObject, isPrimitive, isThenable, logger, normalize, SentryError, SyncPromise, truncate, uuid4 } from '@sentry/utils';\nimport { setupIntegrations } from './integration';\nvar ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding backend constructor and options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}. Also, the Backend instance is available via\n * {@link Client.getBackend}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event via the backend, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(NodeBackend, options);\n *   }\n *\n *   // ...\n * }\n */\n\nvar BaseClient =\n/** @class */\nfunction () {\n  /**\n   * Initializes this client instance.\n   *\n   * @param backendClass A constructor function to create the backend.\n   * @param options Options for the client.\n   */\n  function BaseClient(backendClass, options) {\n    /** Array of used integrations. */\n    this._integrations = {};\n    /** Number of calls being processed */\n\n    this._numProcessing = 0;\n    this._backend = new backendClass(options);\n    this._options = options;\n\n    if (options.dsn) {\n      this._dsn = new Dsn(options.dsn);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n\n\n  BaseClient.prototype.captureException = function (exception, hint, scope) {\n    var _this = this; // ensure we haven't captured this very object before\n\n\n    if (checkOrSetAlreadyCaught(exception)) {\n      logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    var eventId = hint && hint.event_id;\n\n    this._process(this._getBackend().eventFromException(exception, hint).then(function (event) {\n      return _this._captureEvent(event, hint, scope);\n    }).then(function (result) {\n      eventId = result;\n    }));\n\n    return eventId;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.captureMessage = function (message, level, hint, scope) {\n    var _this = this;\n\n    var eventId = hint && hint.event_id;\n    var promisedEvent = isPrimitive(message) ? this._getBackend().eventFromMessage(String(message), level, hint) : this._getBackend().eventFromException(message, hint);\n\n    this._process(promisedEvent.then(function (event) {\n      return _this._captureEvent(event, hint, scope);\n    }).then(function (result) {\n      eventId = result;\n    }));\n\n    return eventId;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.captureEvent = function (event, hint, scope) {\n    var _a; // ensure we haven't captured this very object before\n\n\n    if (((_a = hint) === null || _a === void 0 ? void 0 : _a.originalException) && checkOrSetAlreadyCaught(hint.originalException)) {\n      logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    var eventId = hint && hint.event_id;\n\n    this._process(this._captureEvent(event, hint, scope).then(function (result) {\n      eventId = result;\n    }));\n\n    return eventId;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.captureSession = function (session) {\n    if (!this._isEnabled()) {\n      logger.warn('SDK not enabled, will not capture session.');\n      return;\n    }\n\n    if (!(typeof session.release === 'string')) {\n      logger.warn('Discarded session because of missing or non-string release');\n    } else {\n      this._sendSession(session); // After sending, we set init false to indicate it's not the first occurrence\n\n\n      session.update({\n        init: false\n      });\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.getDsn = function () {\n    return this._dsn;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.getOptions = function () {\n    return this._options;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.getTransport = function () {\n    return this._getBackend().getTransport();\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.flush = function (timeout) {\n    var _this = this;\n\n    return this._isClientDoneProcessing(timeout).then(function (clientFinished) {\n      return _this.getTransport().close(timeout).then(function (transportFlushed) {\n        return clientFinished && transportFlushed;\n      });\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.close = function (timeout) {\n    var _this = this;\n\n    return this.flush(timeout).then(function (result) {\n      _this.getOptions().enabled = false;\n      return result;\n    });\n  };\n  /**\n   * Sets up the integrations\n   */\n\n\n  BaseClient.prototype.setupIntegrations = function () {\n    if (this._isEnabled() && !this._integrations.initialized) {\n      this._integrations = setupIntegrations(this._options);\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.getIntegration = function (integration) {\n    try {\n      return this._integrations[integration.id] || null;\n    } catch (_oO) {\n      logger.warn(\"Cannot retrieve integration \" + integration.id + \" from the current Client\");\n      return null;\n    }\n  };\n  /** Updates existing session based on the provided event */\n\n\n  BaseClient.prototype._updateSessionFromEvent = function (session, event) {\n    var e_1, _a;\n\n    var crashed = false;\n    var errored = false;\n    var exceptions = event.exception && event.exception.values;\n\n    if (exceptions) {\n      errored = true;\n\n      try {\n        for (var exceptions_1 = __values(exceptions), exceptions_1_1 = exceptions_1.next(); !exceptions_1_1.done; exceptions_1_1 = exceptions_1.next()) {\n          var ex = exceptions_1_1.value;\n          var mechanism = ex.mechanism;\n\n          if (mechanism && mechanism.handled === false) {\n            crashed = true;\n            break;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (exceptions_1_1 && !exceptions_1_1.done && (_a = exceptions_1.return)) _a.call(exceptions_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    } // A session is updated and that session update is sent in only one of the two following scenarios:\n    // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n    // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n\n\n    var sessionNonTerminal = session.status === SessionStatus.Ok;\n    var shouldUpdateAndSend = sessionNonTerminal && session.errors === 0 || sessionNonTerminal && crashed;\n\n    if (shouldUpdateAndSend) {\n      session.update(__assign(__assign({}, crashed && {\n        status: SessionStatus.Crashed\n      }), {\n        errors: session.errors || Number(errored || crashed)\n      }));\n      this.captureSession(session);\n    }\n  };\n  /** Deliver captured session to Sentry */\n\n\n  BaseClient.prototype._sendSession = function (session) {\n    this._getBackend().sendSession(session);\n  };\n  /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */\n\n\n  BaseClient.prototype._isClientDoneProcessing = function (timeout) {\n    var _this = this;\n\n    return new SyncPromise(function (resolve) {\n      var ticked = 0;\n      var tick = 1;\n      var interval = setInterval(function () {\n        if (_this._numProcessing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  };\n  /** Returns the current backend. */\n\n\n  BaseClient.prototype._getBackend = function () {\n    return this._backend;\n  };\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n\n\n  BaseClient.prototype._isEnabled = function () {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  };\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n\n\n  BaseClient.prototype._prepareEvent = function (event, scope, hint) {\n    var _this = this;\n\n    var _a = this.getOptions().normalizeDepth,\n        normalizeDepth = _a === void 0 ? 3 : _a;\n\n    var prepared = __assign(__assign({}, event), {\n      event_id: event.event_id || (hint && hint.event_id ? hint.event_id : uuid4()),\n      timestamp: event.timestamp || dateTimestampInSeconds()\n    });\n\n    this._applyClientOptions(prepared);\n\n    this._applyIntegrationsMetadata(prepared); // If we have scope given to us, use it as the base for further modifications.\n    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n\n\n    var finalScope = scope;\n\n    if (hint && hint.captureContext) {\n      finalScope = Scope.clone(finalScope).update(hint.captureContext);\n    } // We prepare the result here with a resolved Event.\n\n\n    var result = SyncPromise.resolve(prepared); // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n\n    if (finalScope) {\n      // In case we have a hub we reassign it.\n      result = finalScope.applyToEvent(prepared, hint);\n    }\n\n    return result.then(function (evt) {\n      if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n        return _this._normalizeEvent(evt, normalizeDepth);\n      }\n\n      return evt;\n    });\n  };\n  /**\n   * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n   * Normalized keys:\n   * - `breadcrumbs.data`\n   * - `user`\n   * - `contexts`\n   * - `extra`\n   * @param event Event\n   * @returns Normalized event\n   */\n\n\n  BaseClient.prototype._normalizeEvent = function (event, depth) {\n    if (!event) {\n      return null;\n    }\n\n    var normalized = __assign(__assign(__assign(__assign(__assign({}, event), event.breadcrumbs && {\n      breadcrumbs: event.breadcrumbs.map(function (b) {\n        return __assign(__assign({}, b), b.data && {\n          data: normalize(b.data, depth)\n        });\n      })\n    }), event.user && {\n      user: normalize(event.user, depth)\n    }), event.contexts && {\n      contexts: normalize(event.contexts, depth)\n    }), event.extra && {\n      extra: normalize(event.extra, depth)\n    }); // event.contexts.trace stores information about a Transaction. Similarly,\n    // event.spans[] stores information about child Spans. Given that a\n    // Transaction is conceptually a Span, normalization should apply to both\n    // Transactions and Spans consistently.\n    // For now the decision is to skip normalization of Transactions and Spans,\n    // so this block overwrites the normalized event to add back the original\n    // Transaction information prior to normalization.\n\n\n    if (event.contexts && event.contexts.trace) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      normalized.contexts.trace = event.contexts.trace;\n    }\n\n    var _a = this.getOptions()._experiments,\n        _experiments = _a === void 0 ? {} : _a;\n\n    if (_experiments.ensureNoCircularStructures) {\n      return normalize(normalized);\n    }\n\n    return normalized;\n  };\n  /**\n   *  Enhances event using the client configuration.\n   *  It takes care of all \"static\" values like environment, release and `dist`,\n   *  as well as truncating overly long values.\n   * @param event event instance to be enhanced\n   */\n\n\n  BaseClient.prototype._applyClientOptions = function (event) {\n    var options = this.getOptions();\n    var environment = options.environment,\n        release = options.release,\n        dist = options.dist,\n        _a = options.maxValueLength,\n        maxValueLength = _a === void 0 ? 250 : _a;\n\n    if (!('environment' in event)) {\n      event.environment = 'environment' in options ? environment : 'production';\n    }\n\n    if (event.release === undefined && release !== undefined) {\n      event.release = release;\n    }\n\n    if (event.dist === undefined && dist !== undefined) {\n      event.dist = dist;\n    }\n\n    if (event.message) {\n      event.message = truncate(event.message, maxValueLength);\n    }\n\n    var exception = event.exception && event.exception.values && event.exception.values[0];\n\n    if (exception && exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n\n    var request = event.request;\n\n    if (request && request.url) {\n      request.url = truncate(request.url, maxValueLength);\n    }\n  };\n  /**\n   * This function adds all used integrations to the SDK info in the event.\n   * @param event The event that will be filled with all integrations.\n   */\n\n\n  BaseClient.prototype._applyIntegrationsMetadata = function (event) {\n    var integrationsArray = Object.keys(this._integrations);\n\n    if (integrationsArray.length > 0) {\n      event.sdk = event.sdk || {};\n      event.sdk.integrations = __spread(event.sdk.integrations || [], integrationsArray);\n    }\n  };\n  /**\n   * Tells the backend to send this event\n   * @param event The Sentry event to send\n   */\n\n\n  BaseClient.prototype._sendEvent = function (event) {\n    this._getBackend().sendEvent(event);\n  };\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n\n\n  BaseClient.prototype._captureEvent = function (event, hint, scope) {\n    return this._processEvent(event, hint, scope).then(function (finalEvent) {\n      return finalEvent.event_id;\n    }, function (reason) {\n      logger.error(reason);\n      return undefined;\n    });\n  };\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n\n\n  BaseClient.prototype._processEvent = function (event, hint, scope) {\n    var _this = this;\n\n    var _a, _b; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\n    var _c = this.getOptions(),\n        beforeSend = _c.beforeSend,\n        sampleRate = _c.sampleRate;\n\n    var transport = this.getTransport();\n\n    if (!this._isEnabled()) {\n      return SyncPromise.reject(new SentryError('SDK not enabled, will not capture event.'));\n    }\n\n    var isTransaction = event.type === 'transaction'; // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n\n    if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      (_b = (_a = transport).recordLostEvent) === null || _b === void 0 ? void 0 : _b.call(_a, Outcome.SampleRate, 'event');\n      return SyncPromise.reject(new SentryError(\"Discarding event because it's not included in the random sample (sampling rate = \" + sampleRate + \")\"));\n    }\n\n    return this._prepareEvent(event, scope, hint).then(function (prepared) {\n      var _a, _b;\n\n      if (prepared === null) {\n        (_b = (_a = transport).recordLostEvent) === null || _b === void 0 ? void 0 : _b.call(_a, Outcome.EventProcessor, event.type || 'event');\n        throw new SentryError('An event processor returned null, will not send event.');\n      }\n\n      var isInternalException = hint && hint.data && hint.data.__sentry__ === true;\n\n      if (isInternalException || isTransaction || !beforeSend) {\n        return prepared;\n      }\n\n      var beforeSendResult = beforeSend(prepared, hint);\n      return _this._ensureBeforeSendRv(beforeSendResult);\n    }).then(function (processedEvent) {\n      var _a, _b;\n\n      if (processedEvent === null) {\n        (_b = (_a = transport).recordLostEvent) === null || _b === void 0 ? void 0 : _b.call(_a, Outcome.BeforeSend, event.type || 'event');\n        throw new SentryError('`beforeSend` returned `null`, will not send event.');\n      }\n\n      var session = scope && scope.getSession && scope.getSession();\n\n      if (!isTransaction && session) {\n        _this._updateSessionFromEvent(session, processedEvent);\n      }\n\n      _this._sendEvent(processedEvent);\n\n      return processedEvent;\n    }).then(null, function (reason) {\n      if (reason instanceof SentryError) {\n        throw reason;\n      }\n\n      _this.captureException(reason, {\n        data: {\n          __sentry__: true\n        },\n        originalException: reason\n      });\n\n      throw new SentryError(\"Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: \" + reason);\n    });\n  };\n  /**\n   * Occupies the client with processing and event\n   */\n\n\n  BaseClient.prototype._process = function (promise) {\n    var _this = this;\n\n    this._numProcessing += 1;\n    void promise.then(function (value) {\n      _this._numProcessing -= 1;\n      return value;\n    }, function (reason) {\n      _this._numProcessing -= 1;\n      return reason;\n    });\n  };\n  /**\n   * Verifies that return value of configured `beforeSend` is of expected type.\n   */\n\n\n  BaseClient.prototype._ensureBeforeSendRv = function (rv) {\n    var nullErr = '`beforeSend` method has to return `null` or a valid event.';\n\n    if (isThenable(rv)) {\n      return rv.then(function (event) {\n        if (!(isPlainObject(event) || event === null)) {\n          throw new SentryError(nullErr);\n        }\n\n        return event;\n      }, function (e) {\n        throw new SentryError(\"beforeSend rejected with \" + e);\n      });\n    } else if (!(isPlainObject(rv) || rv === null)) {\n      throw new SentryError(nullErr);\n    }\n\n    return rv;\n  };\n\n  return BaseClient;\n}();\n\nexport { BaseClient };","map":{"version":3,"sources":["../src/baseclient.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\nimport { Scope, Session } from '@sentry/hub';\nimport {\n  Client,\n  Event,\n  EventHint,\n  Integration,\n  IntegrationClass,\n  Options,\n  Outcome,\n  SessionStatus,\n  Severity,\n  Transport,\n} from '@sentry/types';\nimport {\n  checkOrSetAlreadyCaught,\n  dateTimestampInSeconds,\n  Dsn,\n  isPlainObject,\n  isPrimitive,\n  isThenable,\n  logger,\n  normalize,\n  SentryError,\n  SyncPromise,\n  truncate,\n  uuid4,\n} from '@sentry/utils';\n\nimport { Backend, BackendClass } from './basebackend';\nimport { IntegrationIndex, setupIntegrations } from './integration';\n\nconst ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding backend constructor and options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}. Also, the Backend instance is available via\n * {@link Client.getBackend}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event via the backend, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(NodeBackend, options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class BaseClient<B extends Backend, O extends Options> implements Client<O> {\n  /**\n   * The backend used to physically interact in the environment. Usually, this\n   * will correspond to the client. When composing SDKs, however, the Backend\n   * from the root SDK will be used.\n   */\n  protected readonly _backend: B;\n\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: Dsn;\n\n  /** Array of used integrations. */\n  protected _integrations: IntegrationIndex = {};\n\n  /** Number of calls being processed */\n  protected _numProcessing: number = 0;\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param backendClass A constructor function to create the backend.\n   * @param options Options for the client.\n   */\n  protected constructor(backendClass: BackendClass<B, O>, options: O) {\n    this._backend = new backendClass(options);\n    this._options = options;\n\n    if (options.dsn) {\n      this._dsn = new Dsn(options.dsn);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (checkOrSetAlreadyCaught(exception)) {\n      logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._getBackend()\n        .eventFromException(exception, hint)\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(message: string, level?: Severity, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    const promisedEvent = isPrimitive(message)\n      ? this._getBackend().eventFromMessage(String(message), level, hint)\n      : this._getBackend().eventFromException(message, hint);\n\n    this._process(\n      promisedEvent\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (hint?.originalException && checkOrSetAlreadyCaught(hint.originalException)) {\n      logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._captureEvent(event, hint, scope).then(result => {\n        eventId = result;\n      }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(session: Session): void {\n    if (!this._isEnabled()) {\n      logger.warn('SDK not enabled, will not capture session.');\n      return;\n    }\n\n    if (!(typeof session.release === 'string')) {\n      logger.warn('Discarded session because of missing or non-string release');\n    } else {\n      this._sendSession(session);\n      // After sending, we set init false to indicate it's not the first occurrence\n      session.update({ init: false });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getDsn(): Dsn | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport {\n    return this._getBackend().getTransport();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    return this._isClientDoneProcessing(timeout).then(clientFinished => {\n      return this.getTransport()\n        .close(timeout)\n        .then(transportFlushed => clientFinished && transportFlushed);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      return result;\n    });\n  }\n\n  /**\n   * Sets up the integrations\n   */\n  public setupIntegrations(): void {\n    if (this._isEnabled() && !this._integrations.initialized) {\n      this._integrations = setupIntegrations(this._options);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    try {\n      return (this._integrations[integration.id] as T) || null;\n    } catch (_oO) {\n      logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);\n      return null;\n    }\n  }\n\n  /** Updates existing session based on the provided event */\n  protected _updateSessionFromEvent(session: Session, event: Event): void {\n    let crashed = false;\n    let errored = false;\n    const exceptions = event.exception && event.exception.values;\n\n    if (exceptions) {\n      errored = true;\n\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism && mechanism.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    // A session is updated and that session update is sent in only one of the two following scenarios:\n    // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n    // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n    const sessionNonTerminal = session.status === SessionStatus.Ok;\n    const shouldUpdateAndSend = (sessionNonTerminal && session.errors === 0) || (sessionNonTerminal && crashed);\n\n    if (shouldUpdateAndSend) {\n      session.update({\n        ...(crashed && { status: SessionStatus.Crashed }),\n        errors: session.errors || Number(errored || crashed),\n      });\n      this.captureSession(session);\n    }\n  }\n\n  /** Deliver captured session to Sentry */\n  protected _sendSession(session: Session): void {\n    this._getBackend().sendSession(session);\n  }\n\n  /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */\n  protected _isClientDoneProcessing(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n\n      const interval = setInterval(() => {\n        if (this._numProcessing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Returns the current backend. */\n  protected _getBackend(): B {\n    return this._backend;\n  }\n\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    const { normalizeDepth = 3 } = this.getOptions();\n    const prepared: Event = {\n      ...event,\n      event_id: event.event_id || (hint && hint.event_id ? hint.event_id : uuid4()),\n      timestamp: event.timestamp || dateTimestampInSeconds(),\n    };\n\n    this._applyClientOptions(prepared);\n    this._applyIntegrationsMetadata(prepared);\n\n    // If we have scope given to us, use it as the base for further modifications.\n    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n    let finalScope = scope;\n    if (hint && hint.captureContext) {\n      finalScope = Scope.clone(finalScope).update(hint.captureContext);\n    }\n\n    // We prepare the result here with a resolved Event.\n    let result = SyncPromise.resolve<Event | null>(prepared);\n\n    // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n    if (finalScope) {\n      // In case we have a hub we reassign it.\n      result = finalScope.applyToEvent(prepared, hint);\n    }\n\n    return result.then(evt => {\n      if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n        return this._normalizeEvent(evt, normalizeDepth);\n      }\n      return evt;\n    });\n  }\n\n  /**\n   * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n   * Normalized keys:\n   * - `breadcrumbs.data`\n   * - `user`\n   * - `contexts`\n   * - `extra`\n   * @param event Event\n   * @returns Normalized event\n   */\n  protected _normalizeEvent(event: Event | null, depth: number): Event | null {\n    if (!event) {\n      return null;\n    }\n\n    const normalized = {\n      ...event,\n      ...(event.breadcrumbs && {\n        breadcrumbs: event.breadcrumbs.map(b => ({\n          ...b,\n          ...(b.data && {\n            data: normalize(b.data, depth),\n          }),\n        })),\n      }),\n      ...(event.user && {\n        user: normalize(event.user, depth),\n      }),\n      ...(event.contexts && {\n        contexts: normalize(event.contexts, depth),\n      }),\n      ...(event.extra && {\n        extra: normalize(event.extra, depth),\n      }),\n    };\n    // event.contexts.trace stores information about a Transaction. Similarly,\n    // event.spans[] stores information about child Spans. Given that a\n    // Transaction is conceptually a Span, normalization should apply to both\n    // Transactions and Spans consistently.\n    // For now the decision is to skip normalization of Transactions and Spans,\n    // so this block overwrites the normalized event to add back the original\n    // Transaction information prior to normalization.\n    if (event.contexts && event.contexts.trace) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      normalized.contexts.trace = event.contexts.trace;\n    }\n\n    const { _experiments = {} } = this.getOptions();\n    if (_experiments.ensureNoCircularStructures) {\n      return normalize(normalized);\n    }\n\n    return normalized;\n  }\n\n  /**\n   *  Enhances event using the client configuration.\n   *  It takes care of all \"static\" values like environment, release and `dist`,\n   *  as well as truncating overly long values.\n   * @param event event instance to be enhanced\n   */\n  protected _applyClientOptions(event: Event): void {\n    const options = this.getOptions();\n    const { environment, release, dist, maxValueLength = 250 } = options;\n\n    if (!('environment' in event)) {\n      event.environment = 'environment' in options ? environment : 'production';\n    }\n\n    if (event.release === undefined && release !== undefined) {\n      event.release = release;\n    }\n\n    if (event.dist === undefined && dist !== undefined) {\n      event.dist = dist;\n    }\n\n    if (event.message) {\n      event.message = truncate(event.message, maxValueLength);\n    }\n\n    const exception = event.exception && event.exception.values && event.exception.values[0];\n    if (exception && exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n\n    const request = event.request;\n    if (request && request.url) {\n      request.url = truncate(request.url, maxValueLength);\n    }\n  }\n\n  /**\n   * This function adds all used integrations to the SDK info in the event.\n   * @param event The event that will be filled with all integrations.\n   */\n  protected _applyIntegrationsMetadata(event: Event): void {\n    const integrationsArray = Object.keys(this._integrations);\n    if (integrationsArray.length > 0) {\n      event.sdk = event.sdk || {};\n      event.sdk.integrations = [...(event.sdk.integrations || []), ...integrationsArray];\n    }\n  }\n\n  /**\n   * Tells the backend to send this event\n   * @param event The Sentry event to send\n   */\n  protected _sendEvent(event: Event): void {\n    this._getBackend().sendEvent(event);\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  protected _captureEvent(event: Event, hint?: EventHint, scope?: Scope): PromiseLike<string | undefined> {\n    return this._processEvent(event, hint, scope).then(\n      finalEvent => {\n        return finalEvent.event_id;\n      },\n      reason => {\n        logger.error(reason);\n        return undefined;\n      },\n    );\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(event: Event, hint?: EventHint, scope?: Scope): PromiseLike<Event> {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeSend, sampleRate } = this.getOptions();\n    const transport = this.getTransport();\n\n    if (!this._isEnabled()) {\n      return SyncPromise.reject(new SentryError('SDK not enabled, will not capture event.'));\n    }\n\n    const isTransaction = event.type === 'transaction';\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      transport.recordLostEvent?.(Outcome.SampleRate, 'event');\n      return SyncPromise.reject(\n        new SentryError(\n          `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`,\n        ),\n      );\n    }\n\n    return this._prepareEvent(event, scope, hint)\n      .then(prepared => {\n        if (prepared === null) {\n          transport.recordLostEvent?.(Outcome.EventProcessor, event.type || 'event');\n          throw new SentryError('An event processor returned null, will not send event.');\n        }\n\n        const isInternalException = hint && hint.data && (hint.data as { __sentry__: boolean }).__sentry__ === true;\n        if (isInternalException || isTransaction || !beforeSend) {\n          return prepared;\n        }\n\n        const beforeSendResult = beforeSend(prepared, hint);\n        return this._ensureBeforeSendRv(beforeSendResult);\n      })\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          transport.recordLostEvent?.(Outcome.BeforeSend, event.type || 'event');\n          throw new SentryError('`beforeSend` returned `null`, will not send event.');\n        }\n\n        const session = scope && scope.getSession && scope.getSession();\n        if (!isTransaction && session) {\n          this._updateSessionFromEvent(session, processedEvent);\n        }\n\n        this._sendEvent(processedEvent);\n        return processedEvent;\n      })\n      .then(null, reason => {\n        if (reason instanceof SentryError) {\n          throw reason;\n        }\n\n        this.captureException(reason, {\n          data: {\n            __sentry__: true,\n          },\n          originalException: reason as Error,\n        });\n        throw new SentryError(\n          `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n        );\n      });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n  protected _process<T>(promise: PromiseLike<T>): void {\n    this._numProcessing += 1;\n    void promise.then(\n      value => {\n        this._numProcessing -= 1;\n        return value;\n      },\n      reason => {\n        this._numProcessing -= 1;\n        return reason;\n      },\n    );\n  }\n\n  /**\n   * Verifies that return value of configured `beforeSend` is of expected type.\n   */\n  protected _ensureBeforeSendRv(\n    rv: PromiseLike<Event | null> | Event | null,\n  ): PromiseLike<Event | null> | Event | null {\n    const nullErr = '`beforeSend` method has to return `null` or a valid event.';\n    if (isThenable(rv)) {\n      return (rv as PromiseLike<Event | null>).then(\n        event => {\n          if (!(isPlainObject(event) || event === null)) {\n            throw new SentryError(nullErr);\n          }\n          return event;\n        },\n        e => {\n          throw new SentryError(`beforeSend rejected with ${e}`);\n        },\n      );\n    } else if (!(isPlainObject(rv) || rv === null)) {\n      throw new SentryError(nullErr);\n    }\n    return rv;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}