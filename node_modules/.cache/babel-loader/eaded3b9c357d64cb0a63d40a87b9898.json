{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { endsWithAny } from \"utils/endsWithAny\";\nimport { actions as detailTransactionAction } from \"reducers/detailTransaction\";\nexport const initialState = {\n  fetching: false,\n  detailTransactionModalOpen: false,\n  exportDisabled: true,\n  transactions: [],\n  filters: {\n    inAlert: undefined,\n    maxMinDeliveryDate: undefined,\n    minMinDeliveryDate: undefined,\n    offset: undefined,\n    state: undefined,\n    pickerId: undefined,\n    transactionCode: undefined\n  },\n  filtersExtra: {\n    limit: 3,\n    offset: 0\n  },\n  filtersExtraSeeMore: {\n    limit: 15,\n    offset: 0\n  },\n  seeMore: true\n};\nconst SLICE_NAME = \"transaction\";\n\nconst isRequestAction = action => {\n  const {\n    type\n  } = action;\n  return type.startsWith(SLICE_NAME) && type.endsWith(\"Request\");\n};\n\nconst isResponseAction = action => {\n  const {\n    type\n  } = action;\n  return type.startsWith(SLICE_NAME) && endsWithAny(type, [\"Error\", \"Success\"]);\n};\n\nexport const transactionSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    reset: state => {\n      state = { ...initialState\n      };\n    },\n    getTransactionsRequest: (state, action) => {},\n    getMoreTransactionsRequest: (state, action) => {},\n    getTransactionsSuccess: (state, action) => {\n      state.transactions = action.payload.items;\n      state.seeMore = action.payload.hasMore;\n      state.filtersExtraSeeMore.offset = action.payload.offset + action.payload.limit;\n      state.fetching = false;\n    },\n    getMoreTransactionsSuccess: (state, action) => {\n      state.transactions = state.transactions.concat(action.payload.items);\n      state.seeMore = action.payload.hasMore;\n      state.filtersExtraSeeMore.offset = action.payload.offset + action.payload.limit;\n      state.fetching = false;\n    },\n    getTransactionsError: () => {},\n    setTransactionFilters: (state, action) => {\n      state.filters = action.payload;\n    },\n    setTransactionExtraFilters: (state, action) => {\n      state.filtersExtra = { ...state.filtersExtra,\n        ...action.payload\n      };\n    },\n    setExportEnabled: (state, action) => {\n      state.exportDisabled = action.payload === undefined;\n    },\n    getTransactionsExportRequest: (state, action) => {},\n    getTransactionsExportSuccess: () => {},\n    getTransactionsExportError: () => {},\n    getDetailTransactionDevolutionUndeliveredSuccess: state => {\n      state.detailTransactionModalOpen = false;\n    },\n    getDetailTransactionReasonsCanceledSuccess: state => {\n      state.detailTransactionModalOpen = false;\n    },\n    getDetailTransactionFinishReturnedSuccess: state => {\n      state.detailTransactionModalOpen = false;\n    },\n    getDetailTransactionFinishLostSuccess: state => {\n      state.detailTransactionModalOpen = false;\n    },\n    getDetailTransactionDniDeliveredSuccess: state => {\n      state.detailTransactionModalOpen = false;\n    },\n    getCloseModalDetailTransaction: state => {\n      state.detailTransactionModalOpen = false;\n    }\n  },\n  extraReducers: builder => builder.addCase(detailTransactionAction.getDetailTransactionSuccess.type, state => {\n    state.detailTransactionModalOpen = true;\n    state.fetching = false;\n  }).addCase(detailTransactionAction.getDetailTransactionRequest.type, state => {\n    state.fetching = true;\n  }).addCase(detailTransactionAction.getDetailTransactionMenssagesRequest.type, state => {\n    state.fetching = true;\n  }).addCase(detailTransactionAction.getDetailTransactionMenssagesSuccess.type, state => {\n    state.fetching = false;\n  }).addCase(detailTransactionAction.getDetailTransactionError.type, state => {\n    state.fetching = false;\n  }).addMatcher(isRequestAction, state => {\n    state.fetching = true;\n  }).addMatcher(isResponseAction, state => {\n    state.fetching = false;\n  })\n});\nexport const transactionsSelector = state => state.transactions;\nexport const actions = transactionSlice.actions;\nexport default transactionSlice.reducer;","map":{"version":3,"sources":["/home/nahuel/pickers-admin-front/src/reducers/transactions.ts"],"names":["createSlice","endsWithAny","actions","detailTransactionAction","initialState","fetching","detailTransactionModalOpen","exportDisabled","transactions","filters","inAlert","undefined","maxMinDeliveryDate","minMinDeliveryDate","offset","state","pickerId","transactionCode","filtersExtra","limit","filtersExtraSeeMore","seeMore","SLICE_NAME","isRequestAction","action","type","startsWith","endsWith","isResponseAction","transactionSlice","name","reducers","reset","getTransactionsRequest","getMoreTransactionsRequest","getTransactionsSuccess","payload","items","hasMore","getMoreTransactionsSuccess","concat","getTransactionsError","setTransactionFilters","setTransactionExtraFilters","setExportEnabled","getTransactionsExportRequest","getTransactionsExportSuccess","getTransactionsExportError","getDetailTransactionDevolutionUndeliveredSuccess","getDetailTransactionReasonsCanceledSuccess","getDetailTransactionFinishReturnedSuccess","getDetailTransactionFinishLostSuccess","getDetailTransactionDniDeliveredSuccess","getCloseModalDetailTransaction","extraReducers","builder","addCase","getDetailTransactionSuccess","getDetailTransactionRequest","getDetailTransactionMenssagesRequest","getDetailTransactionMenssagesSuccess","getDetailTransactionError","addMatcher","transactionsSelector","reducer"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction, Action } from \"@reduxjs/toolkit\";\nimport { FilterTransactionsType } from \"sagas/types/transactions\";\nimport { RootState } from \"store\";\nimport { endsWithAny } from \"utils/endsWithAny\";\nimport { actions as detailTransactionAction } from \"reducers/detailTransaction\";\nimport {\n  GetTransactionsSuccessType,\n  SetFilterExtraType,\n  SetFilterType,\n  TransactionStateType,\n} from \"./types/transaction\";\n\nexport const initialState: TransactionStateType = {\n  fetching: false,\n  detailTransactionModalOpen: false,\n  exportDisabled: true,\n  transactions: [],\n  filters: {\n    inAlert: undefined,\n    maxMinDeliveryDate: undefined,\n    minMinDeliveryDate: undefined,\n    offset: undefined,\n    state: undefined,\n    pickerId: undefined,\n    transactionCode: undefined,\n  },\n  filtersExtra: {\n    limit: 3,\n    offset: 0,\n  },\n  filtersExtraSeeMore: {\n    limit: 15,\n    offset: 0,\n  },\n  seeMore: true,\n};\n\nconst SLICE_NAME = \"transaction\";\n\nconst isRequestAction = (action: Action<string>) => {\n  const { type } = action;\n  return type.startsWith(SLICE_NAME) && type.endsWith(\"Request\");\n};\n\nconst isResponseAction = (action: Action<string>) => {\n  const { type } = action;\n  return type.startsWith(SLICE_NAME) && endsWithAny(type, [\"Error\", \"Success\"]);\n};\n\nexport const transactionSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    reset: (state: TransactionStateType) => {\n      state = {\n        ...initialState,\n      };\n    },\n    getTransactionsRequest: (\n      state: TransactionStateType,\n      action: PayloadAction<FilterTransactionsType>\n    ) => {},\n    getMoreTransactionsRequest: (\n      state: TransactionStateType,\n      action: PayloadAction<FilterTransactionsType>\n    ) => {},\n    getTransactionsSuccess: (\n      state: TransactionStateType,\n      action: PayloadAction<GetTransactionsSuccessType>\n    ) => {\n      state.transactions = action.payload.items;\n      state.seeMore = action.payload.hasMore;\n      state.filtersExtraSeeMore.offset =\n        action.payload.offset + action.payload.limit;\n      state.fetching = false;\n    },\n    getMoreTransactionsSuccess: (\n      state: TransactionStateType,\n      action: PayloadAction<GetTransactionsSuccessType>\n    ) => {\n      state.transactions = state.transactions.concat(action.payload.items);\n      state.seeMore = action.payload.hasMore;\n      state.filtersExtraSeeMore.offset =\n        action.payload.offset + action.payload.limit;\n      state.fetching = false;\n    },\n    getTransactionsError: () => {},\n    setTransactionFilters: (\n      state: TransactionStateType,\n      action: PayloadAction<SetFilterType>\n    ) => {\n      state.filters = action.payload;\n    },\n    setTransactionExtraFilters: (\n      state: TransactionStateType,\n      action: PayloadAction<SetFilterExtraType>\n    ) => {\n      state.filtersExtra = { ...state.filtersExtra, ...action.payload };\n    },\n    setExportEnabled: (\n      state: TransactionStateType,\n      action: PayloadAction<string | number | undefined>\n    ) => {\n      state.exportDisabled = action.payload === undefined;\n    },\n    getTransactionsExportRequest: (\n      state: TransactionStateType,\n      action: PayloadAction<FilterTransactionsType>\n    ) => {},\n    getTransactionsExportSuccess: () => {},\n    getTransactionsExportError: () => {},\n\n    getDetailTransactionDevolutionUndeliveredSuccess: (\n      state: TransactionStateType\n    ) => {\n      state.detailTransactionModalOpen = false;\n    },\n    getDetailTransactionReasonsCanceledSuccess: (\n      state: TransactionStateType\n    ) => {\n      state.detailTransactionModalOpen = false;\n    },\n    getDetailTransactionFinishReturnedSuccess: (\n      state: TransactionStateType\n    ) => {\n      state.detailTransactionModalOpen = false;\n    },\n    getDetailTransactionFinishLostSuccess: (state: TransactionStateType) => {\n      state.detailTransactionModalOpen = false;\n    },\n    getDetailTransactionDniDeliveredSuccess: (state: TransactionStateType) => {\n      state.detailTransactionModalOpen = false;\n    },\n    getCloseModalDetailTransaction: (state: TransactionStateType) => {\n      state.detailTransactionModalOpen = false;\n    },\n  },\n  extraReducers: (builder) =>\n    builder\n      .addCase(\n        detailTransactionAction.getDetailTransactionSuccess.type,\n        (state: TransactionStateType) => {\n          state.detailTransactionModalOpen = true;\n          state.fetching = false;\n        }\n      )\n      .addCase(\n        detailTransactionAction.getDetailTransactionRequest.type,\n        (state: TransactionStateType) => {\n          state.fetching = true;\n        }\n      )\n      .addCase(\n        detailTransactionAction.getDetailTransactionMenssagesRequest.type,\n        (state: TransactionStateType) => {\n          state.fetching = true;\n        }\n      )\n      .addCase(\n        detailTransactionAction.getDetailTransactionMenssagesSuccess.type,\n        (state: TransactionStateType) => {\n          state.fetching = false;\n        }\n      )\n      .addCase(\n        detailTransactionAction.getDetailTransactionError.type,\n        (state: TransactionStateType) => {\n          state.fetching = false;\n        }\n      )\n      .addMatcher(isRequestAction, (state: TransactionStateType) => {\n        state.fetching = true;\n      })\n      .addMatcher(isResponseAction, (state: TransactionStateType) => {\n        state.fetching = false;\n      }),\n});\n\nexport const transactionsSelector = (state: RootState) => state.transactions;\n\nexport const actions = transactionSlice.actions;\n\nexport default transactionSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}