{"ast":null,"code":"var _jsxFileName = \"/home/nahuel/pickers-admin-front/src/component/inputs/NumericInput.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from \"react\";\nimport classNames from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_CHARACTER = 15; // TODO: Tipar las props\n\nexport const NumericInput = props => {\n  _s();\n\n  const {\n    className,\n    label,\n    id,\n    placeholder,\n    middle,\n    disabled,\n    input,\n    value,\n    lastLabel,\n    meta,\n    maxLength\n  } = props;\n  const [internalValue, setInternalValue] = useState({\n    internalValue: input ? input.value : '',\n    isActive: false\n  });\n  const handleNumberValidation = useCallback(valueInput => {\n    var _emitValue;\n\n    let emitValue;\n\n    if (/^\\d+\\.?\\d*$/.test(valueInput) && valueInput.length <= MAX_CHARACTER) {\n      emitValue = parseFloat(valueInput);\n    } else if (/^\\d+,?\\d*$/.test(valueInput) && valueInput.length <= MAX_CHARACTER) {\n      const noComaValue = valueInput.replace(\",\", \".\");\n      emitValue = parseFloat(noComaValue);\n    }\n\n    return (_emitValue = emitValue) !== null && _emitValue !== void 0 ? _emitValue : \"\";\n  }, []);\n  const handleChange = useCallback(event => {\n    const checkedValue = handleNumberValidation(event.target.value);\n\n    if (event.target.value === \"\" || typeof checkedValue === \"number\") {\n      setInternalValue({\n        internalValue: event.target.value,\n        isActive: true\n      });\n\n      if (input) {\n        input.onChange(checkedValue);\n      }\n    }\n  }, [input, handleNumberValidation]);\n  const handleBlur = useCallback(() => {\n    setInternalValue({\n      internalValue: input ? input.value : value,\n      isActive: false\n    });\n\n    if (input) {\n      input.onBlur();\n    }\n  }, [input, value]);\n  const handleFocus = useCallback(() => {\n    setInternalValue({\n      internalValue: input ? input.value : value,\n      isActive: true\n    });\n  }, [input, value]);\n  const variableToShow = internalValue.isActive ? internalValue.internalValue.toString() : input.value;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classNames({\n      \"has-error\": meta.error && meta.touched\n    }),\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: id,\n      className: classNames(middle ? \"label-Admin-Pickers-middle\" : \"label-Admin-Pickers\", {\n        labelError: meta.error && meta.touched,\n        disabled: disabled,\n        \"last-label\": lastLabel\n      }),\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: classNames(className, {\n        disabled: disabled,\n        inputError: meta.error && meta.touched\n      }),\n      type: input.type,\n      name: input.name,\n      disabled: disabled,\n      id: id,\n      value: variableToShow,\n      placeholder: placeholder,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      maxLength: maxLength,\n      autoComplete: \"off\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), meta.error && meta.touched && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-errors-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"errors\",\n        children: [\" \", meta.error, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NumericInput, \"ShGaEucgRLreMdSk10d6CTYdd6k=\");\n\n_c = NumericInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"NumericInput\");","map":{"version":3,"sources":["/home/nahuel/pickers-admin-front/src/component/inputs/NumericInput.tsx"],"names":["React","useCallback","useState","classNames","MAX_CHARACTER","NumericInput","props","className","label","id","placeholder","middle","disabled","input","value","lastLabel","meta","maxLength","internalValue","setInternalValue","isActive","handleNumberValidation","valueInput","emitValue","test","length","parseFloat","noComaValue","replace","handleChange","event","checkedValue","target","onChange","handleBlur","onBlur","handleFocus","variableToShow","toString","error","touched","labelError","inputError","type","name"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from \"react\";\nimport classNames from \"classnames\";\n\nconst MAX_CHARACTER = 15;\n\n// TODO: Tipar las props\nexport const NumericInput = (props: any) => {\n  const {\n    className,\n    label,\n    id,\n    placeholder,\n    middle,\n    disabled,\n    input,\n\t\tvalue,\n    lastLabel,\n    meta,\n    maxLength\n  } = props;\n\tconst [internalValue, setInternalValue] = useState({\n    internalValue: input ? input.value : '',\n    isActive: false,\n  });\n  const handleNumberValidation = useCallback(\n    (valueInput: string) => {\n      let emitValue;\n      if (\n        /^\\d+\\.?\\d*$/.test(valueInput) &&\n        valueInput.length <= MAX_CHARACTER\n      ) {\n        emitValue = parseFloat(valueInput);\n      } else if (\n        /^\\d+,?\\d*$/.test(valueInput) &&\n        valueInput.length <= MAX_CHARACTER\n      ) {\n        const noComaValue = valueInput.replace(\",\", \".\");\n        emitValue = parseFloat(noComaValue);\n      }\n      return emitValue ?? \"\";\n    },\n    []\n  );\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const checkedValue = handleNumberValidation(event.target.value);\n      if (event.target.value === \"\" || typeof checkedValue === \"number\") {\n        setInternalValue({\n          internalValue: event.target.value,\n          isActive: true,\n        });\n        if (input) {\n          input.onChange(checkedValue);\n        }\n        \n      }\n    },\n    [input, handleNumberValidation]\n  );\n\n  const handleBlur = useCallback(() => {\n    setInternalValue({\n      internalValue: input ? input.value : value,\n      isActive: false,\n    });\n    if (input) {\n      input.onBlur();\n    }\n  }, [input, value]);\n\n  const handleFocus = useCallback(() => {\n    setInternalValue({\n      internalValue: input ? input.value : value,\n      isActive: true,\n    });\n  }, [input, value]);\n\n\tconst variableToShow = internalValue.isActive\n    ? internalValue.internalValue.toString()\n    : input.value;\n\n  return (\n    <div\n      className={classNames({\n        \"has-error\": meta.error && meta.touched,\n      })}\n    >\n      <label\n        htmlFor={id}\n        className={classNames(\n          middle ? \"label-Admin-Pickers-middle\" : \"label-Admin-Pickers\",\n          {\n            labelError: meta.error && meta.touched,\n            disabled: disabled,\n            \"last-label\": lastLabel,\n          }\n        )}\n      >\n        {label}\n      </label>\n      <input\n        className={classNames(className, {\n          disabled: disabled,\n          inputError: meta.error && meta.touched\n        })}\n        type={input.type}\n        name={input.name}\n        disabled={disabled}\n        id={id}\n        value={variableToShow}\n        placeholder={placeholder}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        onFocus={handleFocus}\n        maxLength={maxLength}\n        autoComplete=\"off\"\n      />\n      {meta.error && meta.touched && (\n        <div className=\"input-errors-container\">\n          <p className=\"errors\"> {meta.error} </p>\n        </div>\n      )}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}