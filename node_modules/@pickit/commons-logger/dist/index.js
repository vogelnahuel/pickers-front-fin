(function webpackUniversalModuleDefinition(root, factory) {
	//Logger Test
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	//Logger Test
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	//Logger Test
	else if(typeof exports === 'object')
		exports["logger"] = factory();
	//Logger Test
	else
		root["logger"] = factory();
})(global, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./index.ts":
/*!******************!*\
  !*** ./index.ts ***!
  \******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OriginType = exports.MethodType = exports.LoggerV2 = exports.LoggerClass = void 0;
const Logger_1 = __webpack_require__(/*! ./src/services/Logger */ "./src/services/Logger.ts");
exports.LoggerClass = Logger_1.default;
const MethodType_1 = __webpack_require__(/*! ./src/constants/MethodType */ "./src/constants/MethodType.ts");
exports.MethodType = MethodType_1.default;
const OriginType_1 = __webpack_require__(/*! ./src/constants/OriginType */ "./src/constants/OriginType.ts");
exports.OriginType = OriginType_1.default;
const LoggerV2_1 = __webpack_require__(/*! ./src/services/LoggerV2 */ "./src/services/LoggerV2.ts");
exports.LoggerV2 = LoggerV2_1.default;


/***/ }),

/***/ "./src/constants/LevelType.ts":
/*!************************************!*\
  !*** ./src/constants/LevelType.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class LoggerType {
}
LoggerType.info = "info";
LoggerType.error = "error";
LoggerType.debug = "debug";
LoggerType.warn = "warn";
exports.default = LoggerType;


/***/ }),

/***/ "./src/constants/LoggerType.ts":
/*!*************************************!*\
  !*** ./src/constants/LoggerType.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class LoggerType {
}
LoggerType.REQUEST = "Request";
LoggerType.RESPONSE = "Response";
LoggerType.MESSAGE = "Message";
exports.default = LoggerType;


/***/ }),

/***/ "./src/constants/MethodType.ts":
/*!*************************************!*\
  !*** ./src/constants/MethodType.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class MethodType {
}
MethodType.POST = "POST";
MethodType.PUT = "PUT";
MethodType.DELETE = "DELETE";
MethodType.PATCH = "PATCH";
MethodType.GET = "GET";
MethodType.OPTIONS = "OPTIONS";
exports.default = MethodType;


/***/ }),

/***/ "./src/constants/OriginType.ts":
/*!*************************************!*\
  !*** ./src/constants/OriginType.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class OriginType {
}
OriginType.internal = "internal";
OriginType.external = "external";
exports.default = OriginType;


/***/ }),

/***/ "./src/models/ConsoleFormatter.ts":
/*!****************************************!*\
  !*** ./src/models/ConsoleFormatter.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Formatter_1 = __webpack_require__(/*! ./Formatter */ "./src/models/Formatter.ts");
const rTracer = __webpack_require__(/*! @pickit/cls-rtracer */ "@pickit/cls-rtracer");
class ConsoleFormat extends Formatter_1.default {
    constructor() {
        super(...arguments);
        this.formatMessageConsole = (info) => {
            const ERROR = "\u001b[31merror\u001b[39m";
            let traceId = rTracer.id();
            let message = traceId
                ? `${this.displayTimestamp(info.timestamp)} ${this.displayTraceId(traceId)} ${info.level} : ${info.message}`
                : `${this.displayTimestamp(info.timestamp)} ${this.displayTraceId(this.getTraceId())} ${info.level} : ${info.message}`;
            if (info.level === ERROR) {
                message += `${this.displayName(info.name)} ${this.displayHttpStatus(info.displayHttpStatus)} ${this.displayCode(info.code)} ${this.displayStack(info.stack)}`;
            }
            else {
                message += this.displayData(info.data);
            }
            return message;
        };
        this.displayTimestamp = (timestamp) => {
            return `[\u001b[36m${timestamp}\u001b[39m]`;
        };
        this.displayTraceId = (traceId) => {
            return traceId ? "[\u001b[36mtraceId:" + traceId + "\u001b[39m]" : "";
        };
        this.displayName = (name) => {
            return name ? `[\u001b[35mtypeError:${name}\u001b[39m]` : "";
        };
        this.displayCode = (code) => {
            return code ? `[\u001b[35mcode:${code}\u001b[39m]` : "";
        };
        this.displayStack = (stack) => {
            return stack ? ` - [stack-trace ---> ${stack}]` : "";
        };
        this.displayHttpStatus = (httpStatus) => {
            return httpStatus ? `[\u001b[35mhttpStatus:${httpStatus}\u001b[39m]` : "";
        };
        this.displayData = (data) => {
            return data ? JSON.stringify(data) : "";
        };
    }
}
exports.default = ConsoleFormat;


/***/ }),

/***/ "./src/models/Formatter.ts":
/*!*********************************!*\
  !*** ./src/models/Formatter.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const httpContext = __webpack_require__(/*! express-http-context */ "express-http-context");
class Formatter {
    constructor() {
        this.getTraceId = () => {
            if (httpContext.get("traceId")) {
                return httpContext.get("traceId");
            }
            else {
                let result = new String();
                return Reflect.getMetadata("traceIDcron", result, "toString");
            }
        };
    }
}
exports.default = Formatter;


/***/ }),

/***/ "./src/services/LeveledLogMethods/LeveledLogMethod.ts":
/*!************************************************************!*\
  !*** ./src/services/LeveledLogMethods/LeveledLogMethod.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const rTracer = __webpack_require__(/*! @pickit/cls-rtracer */ "@pickit/cls-rtracer");
const LoggerType_1 = __webpack_require__(/*! ../../constants/LoggerType */ "./src/constants/LoggerType.ts");
const typedi_1 = __webpack_require__(/*! typedi */ "typedi");
let LeveledLogMethod = class LeveledLogMethod {
    constructor() {
        this.getInfo = (message) => {
            switch (message.type) {
                case LoggerType_1.default.REQUEST:
                    return `Type: ${LoggerType_1.default.REQUEST} | OriginType: ${message.originType} | Level: ${this.displayLevel(message.level)} | Method: ${message.method} | Domain: ${message.domain} | Endpoint: ${message.endpoint} | Content: ${message.content} `;
                case LoggerType_1.default.RESPONSE:
                    return `Type: ${LoggerType_1.default.RESPONSE} | OriginType: ${message.originType} | Level: ${this.displayLevel(message.level)} | StatusCode: ${this.displayStatusCode(message.statusCode)} | Content: ${message.content}`;
                case LoggerType_1.default.MESSAGE:
                default:
                    return `Type: ${LoggerType_1.default.MESSAGE} | Level: ${this.displayLevel(message.level)} | Content: ${message.content}`;
            }
        };
        this.displayTimestamp = (timestamp) => {
            return `[\u001b[36m${timestamp}\u001b[39m]`;
        };
        this.displayTraceId = (traceId) => {
            return traceId ? `[\u001b[36mtraceId:${traceId}\u001b[39m]` : "";
        };
        this.getAppName = () => {
            return `[\u001b[35m${process.env.APP_NAME}\u001b[39m]`;
        };
        this.displayStatusCode = (statusCode) => {
            return `[\u001b[35m${statusCode.toString()}\u001b[39m]`;
        };
        this.displayLevel = (level) => {
            switch (level.toLowerCase()) {
                case "error":
                    return `[\u001b[31m${level}\u001b[39m]`;
                case "info":
                    return `[\u001b[32m${level}\u001b[39m]`;
                case "warn":
                    return `[\u001b[33m${level}\u001b[39m]`;
                case "debug":
                    return `[\u001b[34m${level}\u001b[39m]`;
                default:
                    return `[\u001b[32m${level}\u001b[39m]`;
            }
        };
    }
    getTraceId() {
        return rTracer.id();
    }
    formatMessageConsole(message) {
        let info = this.getInfo(message);
        let output = ``;
        output += message.traceId ? `${this.getAppName()} ${this.displayTimestamp(message.tsLog.toISOString())} ${this.displayTraceId(message.traceId)} | ${info}`
            : `${this.getAppName()} ${this.displayTimestamp(message.tsLog.toISOString())} | ${info}`;
        return output;
    }
};
LeveledLogMethod = __decorate([
    typedi_1.Service(),
    __metadata("design:paramtypes", [])
], LeveledLogMethod);
exports.default = LeveledLogMethod;


/***/ }),

/***/ "./src/services/LeveledLogMethods/LeveledMessageLogMethod.ts":
/*!*******************************************************************!*\
  !*** ./src/services/LeveledLogMethods/LeveledMessageLogMethod.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const LeveledLogMethod_1 = __webpack_require__(/*! ./LeveledLogMethod */ "./src/services/LeveledLogMethods/LeveledLogMethod.ts");
const LoggerType_1 = __webpack_require__(/*! ../../constants/LoggerType */ "./src/constants/LoggerType.ts");
const LevelType_1 = __webpack_require__(/*! ../../constants/LevelType */ "./src/constants/LevelType.ts");
const rTracer = __webpack_require__(/*! @pickit/cls-rtracer */ "@pickit/cls-rtracer");
class LeveledMessageLogMethod extends LeveledLogMethod_1.default {
    info(message) {
        let msg = {
            nameApp: process.env.APP_NAME,
            originType: null,
            traceId: rTracer.id(),
            level: LevelType_1.default.info,
            type: LoggerType_1.default.MESSAGE,
            method: null,
            statusCode: null,
            domain: null,
            endpoint: null,
            url: null,
            content: message,
            tsLog: new Date()
        };
        console.error(this.formatMessageConsole(msg));
    }
    error(message) {
        let msg = {
            nameApp: process.env.APP_NAME,
            originType: null,
            traceId: rTracer.id(),
            level: LevelType_1.default.error,
            type: LoggerType_1.default.MESSAGE,
            method: null,
            statusCode: null,
            domain: null,
            endpoint: null,
            url: null,
            content: message,
            tsLog: new Date()
        };
        console.error(this.formatMessageConsole(msg));
    }
    debug(message) {
        let msg = {
            nameApp: process.env.APP_NAME,
            originType: null,
            traceId: rTracer.id(),
            level: LevelType_1.default.debug,
            type: LoggerType_1.default.MESSAGE,
            method: null,
            statusCode: null,
            domain: null,
            endpoint: null,
            url: null,
            content: message,
            tsLog: new Date()
        };
        if (process.env.PICKIT_DEBUG == 'true') {
            console.debug(this.formatMessageConsole(msg));
        }
        ;
    }
    warn(message) {
        let msg = {
            nameApp: process.env.APP_NAME,
            originType: null,
            traceId: rTracer.id(),
            level: LevelType_1.default.warn,
            type: LoggerType_1.default.MESSAGE,
            method: null,
            statusCode: null,
            domain: null,
            endpoint: null,
            url: null,
            content: message,
            tsLog: new Date()
        };
        console.warn(this.formatMessageConsole(msg));
    }
}
exports.default = LeveledMessageLogMethod;


/***/ }),

/***/ "./src/services/LeveledLogMethods/LeveledRequestLogMethod.ts":
/*!*******************************************************************!*\
  !*** ./src/services/LeveledLogMethods/LeveledRequestLogMethod.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const LeveledLogMethod_1 = __webpack_require__(/*! ./LeveledLogMethod */ "./src/services/LeveledLogMethods/LeveledLogMethod.ts");
const LoggerType_1 = __webpack_require__(/*! ../../constants/LoggerType */ "./src/constants/LoggerType.ts");
const LevelType_1 = __webpack_require__(/*! ../../constants/LevelType */ "./src/constants/LevelType.ts");
class LeveledRequestLogMethod extends LeveledLogMethod_1.default {
    info(origin, method, domain, endpoint, body, header) {
        let message = {
            nameApp: process.env.APP_NAME,
            originType: origin,
            traceId: this.getTraceId(),
            level: LevelType_1.default.info,
            type: LoggerType_1.default.REQUEST,
            method: method,
            statusCode: null,
            domain: domain,
            endpoint: endpoint,
            url: `${domain}${endpoint}`,
            content: `Headers: ${header} Body: ${body}`,
            tsLog: new Date()
        };
        console.info(this.formatMessageConsole(message));
    }
    error(origin, method, domain, endpoint, body, header) {
        let message = {
            nameApp: process.env.APP_NAME,
            originType: origin,
            traceId: this.getTraceId(),
            level: LevelType_1.default.error,
            type: LoggerType_1.default.REQUEST,
            method: method,
            statusCode: null,
            domain: domain,
            endpoint: endpoint,
            url: `${domain}${endpoint}`,
            content: `Headers: ${header} Body: ${body}`,
            tsLog: new Date()
        };
        console.error(this.formatMessageConsole(message));
    }
}
exports.default = LeveledRequestLogMethod;


/***/ }),

/***/ "./src/services/LeveledLogMethods/LeveledResponseLogMethod.ts":
/*!********************************************************************!*\
  !*** ./src/services/LeveledLogMethods/LeveledResponseLogMethod.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const LeveledLogMethod_1 = __webpack_require__(/*! ./LeveledLogMethod */ "./src/services/LeveledLogMethods/LeveledLogMethod.ts");
const LoggerType_1 = __webpack_require__(/*! ../../constants/LoggerType */ "./src/constants/LoggerType.ts");
const LevelType_1 = __webpack_require__(/*! ../../constants/LevelType */ "./src/constants/LevelType.ts");
class LeveledResponseLogMethod extends LeveledLogMethod_1.default {
    info(origin, statusCode, body, header) {
        let message = {
            nameApp: process.env.APP_NAME,
            originType: origin,
            traceId: this.getTraceId(),
            level: LevelType_1.default.info,
            type: LoggerType_1.default.RESPONSE,
            method: null,
            statusCode: statusCode,
            domain: null,
            endpoint: null,
            url: null,
            content: `Headers: ${header} Body: ${body}`,
            tsLog: new Date()
        };
        console.info(this.formatMessageConsole(message));
    }
    error(origin, statusCode, body, header) {
        let message = {
            nameApp: process.env.APP_NAME,
            originType: origin,
            traceId: this.getTraceId(),
            level: LevelType_1.default.error,
            type: LoggerType_1.default.RESPONSE,
            method: null,
            statusCode: statusCode,
            domain: null,
            endpoint: null,
            url: null,
            content: `Headers: ${header} Body: ${body}`,
            tsLog: new Date()
        };
        console.error(this.formatMessageConsole(message));
    }
}
exports.default = LeveledResponseLogMethod;


/***/ }),

/***/ "./src/services/Logger.ts":
/*!********************************!*\
  !*** ./src/services/Logger.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const winston_1 = __webpack_require__(/*! winston */ "winston");
__webpack_require__(/*! reflect-metadata */ "reflect-metadata");
const ConsoleFormatter_1 = __webpack_require__(/*! ../models/ConsoleFormatter */ "./src/models/ConsoleFormatter.ts");
const uuid = __webpack_require__(/*! node-uuid */ "node-uuid");
class LoggerClass {
    static createLogger() {
        let consoleFormatter = new ConsoleFormatter_1.default();
        return winston_1.createLogger({
            transports: [
                new winston_1.transports.Console({
                    level: "debug",
                    format: winston_1.format.combine(winston_1.format.colorize(), winston_1.format.json(), winston_1.format.timestamp({ format: 'YYYY-MM-DDTHH:mm:ss.SSSZ' }), winston_1.format.printf(consoleFormatter.formatMessageConsole)),
                }),
            ],
        });
    }
}
exports.default = LoggerClass;
LoggerClass.setTraceId = () => {
    const traceID = uuid.v4();
    Reflect.defineMetadata("traceIDcron", traceID, String.prototype, "toString");
};


/***/ }),

/***/ "./src/services/LoggerV2.ts":
/*!**********************************!*\
  !*** ./src/services/LoggerV2.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const LeveledRequestLogMethod_1 = __webpack_require__(/*! ./LeveledLogMethods/LeveledRequestLogMethod */ "./src/services/LeveledLogMethods/LeveledRequestLogMethod.ts");
const LeveledResponseLogMethod_1 = __webpack_require__(/*! ./LeveledLogMethods/LeveledResponseLogMethod */ "./src/services/LeveledLogMethods/LeveledResponseLogMethod.ts");
const LeveledMessageLogMethod_1 = __webpack_require__(/*! ./LeveledLogMethods/LeveledMessageLogMethod */ "./src/services/LeveledLogMethods/LeveledMessageLogMethod.ts");
const typedi_1 = __webpack_require__(/*! typedi */ "typedi");
let LoggerV2 = class LoggerV2 {
    constructor() {
        this.request = typedi_1.Container.get(LeveledRequestLogMethod_1.default);
        this.response = typedi_1.Container.get(LeveledResponseLogMethod_1.default);
        this.message = typedi_1.Container.get(LeveledMessageLogMethod_1.default);
        this.validateEnvironments();
    }
    getTraceId() {
        return this.message.getTraceId();
    }
    validateEnvironments() {
        if (!process.env.APP_NAME) {
            console.warn("Error Logger: The environment 'APP_NAME' is required");
        }
    }
};
LoggerV2 = __decorate([
    typedi_1.Service(),
    __metadata("design:paramtypes", [])
], LoggerV2);
exports.default = LoggerV2;


/***/ }),

/***/ "@pickit/cls-rtracer":
/*!**************************************!*\
  !*** external "@pickit/cls-rtracer" ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@pickit/cls-rtracer");

/***/ }),

/***/ "express-http-context":
/*!***************************************!*\
  !*** external "express-http-context" ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("express-http-context");

/***/ }),

/***/ "node-uuid":
/*!****************************!*\
  !*** external "node-uuid" ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("node-uuid");

/***/ }),

/***/ "reflect-metadata":
/*!***********************************!*\
  !*** external "reflect-metadata" ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("reflect-metadata");

/***/ }),

/***/ "typedi":
/*!*************************!*\
  !*** external "typedi" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("typedi");

/***/ }),

/***/ "winston":
/*!**************************!*\
  !*** external "winston" ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("winston");

/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,